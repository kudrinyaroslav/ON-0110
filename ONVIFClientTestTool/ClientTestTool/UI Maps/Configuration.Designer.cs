// ------------------------------------------------------------------------------
//  <auto-generated>
//      Этот код был создан построителем кодированных тестов ИП.
//      Версия: 11.0.0.0
//
//      Изменения, внесенные в этот файл, могут привести к неправильной работе кода и будут
//      утрачены при повторном формировании кода.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace ClientTestTool.UIMaps.ConfigurationClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;    
    
    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.50727.1")]
    public partial class Configuration
    {
        /// <summary>
        /// AddFeatureFiles
        /// </summary>
        public void AddFeatureFiles()
        {
            #region Variable Declarations
            
            WinButton uIBrowseButton = this.UIONVIFClientTestToolWindow.UIBrowseWindow.UIBrowseButton;            
            WinList uILVUnitsList = this.UIONVIFClientTestToolWindow.UILVUnitsWindow.UILVUnitsList;
            #endregion
            
            if (test.featureDevice != null)
            {
                foreach (var feature in this.test.featureDevice)
                {
                   foreach (WinCheckBox listItem in uILVUnitsList.Items)
                    {
                        if (listItem.AccessibleDescription.Contains(feature.Key))
                        {
                            listItem.WaitForControlReady();
                            Mouse.Click(listItem);
                            break;
                        }
                    }                    

                    // Щелкните "Browse" кнопка
                    uIBrowseButton.WaitForControlReady();
                    Mouse.Click(uIBrowseButton);
                    this.UIOpenWindow.WaitForControlExist();

                    //WinEdit uIИмяфайлаEdit = new WinEdit();
                    WinEdit uIИмяфайлаEdit = this.UIOpenWindow.UIItemWindow.UIFilenameEdit;
                    WinButton uIОткрытьButton = this.UIOpenWindow.UIOpenWindow1.UIOpenButton;
                    
                    uIИмяфайлаEdit.WaitForControlReady(10000);
                    System.Threading.Thread.Sleep(1000);
                    uIИмяфайлаEdit.Text = feature.Value;
                    //uIИмяфайлаEdit.CopyPastedText = feature.Value;


                    // Щелкните "&Открыть" кнопка
                    uIОткрытьButton.WaitForControlReady();
                    Mouse.Click(uIОткрытьButton);
                    this.UIOpenWindow.WaitForControlNotExist();
                }
            }
        }
        
        /// <summary>
        /// AddpcapngFiles
        /// </summary>
        public void AddpcapngFiles()
        {            
            #region Variable Declarations
            WinEdit uITBPathNetworkTraceEdit = this.UIONVIFClientTestToolWindow.UITBPathNetworkTraceWindow.UITBPathNetworkTraceEdit;
            WinButton uIAddButton = this.UIONVIFClientTestToolWindow.UIAddWindow.UIAddButton;
            #endregion
                        
            foreach (string s in test.pcapng)
            {
                uITBPathNetworkTraceEdit.WaitForControlReady(20000);
                uITBPathNetworkTraceEdit.Text = s;
                //uITBPathNetworkTraceEdit.CopyPastedText = s;

                // Щелкните "Add..." кнопка
                uIAddButton.WaitForControlReady(10000);
                Mouse.Click(uIAddButton);
            }

        }
        /// <summary>
        /// StartParsing
        /// </summary>
        public void StartParsing()
        {
            #region Variable Declarations
            WinButton uIStartParsingButton = this.UIONVIFClientTestToolWindow.UIStartParsingWindow.UIStartParsingButton;
            #endregion

            // Щелкните "Start Parsing" кнопка
            uIStartParsingButton.WaitForControlReady();
            Mouse.Click(uIStartParsingButton);
            WinText text = this.UIONVIFClientTestToolWindow.UISSMainStatusBar.UIItemText;
            text.WaitForControlCondition(IsStatusDone, 2700000);
        }

        private bool IsStatusDone(UITestControl control)
        {
            WinText statusText = control as WinText;
            //if (statusText.Name == "Done!")
            if (statusText.Name == "Partial parsing process has been completed.")
                return true;
            else
                return false;
        } 
        
        #region Properties
        public UIONVIFClientTestToolWindow UIONVIFClientTestToolWindow
        {
            get
            {
                if ((this.mUIONVIFClientTestToolWindow == null))
                {
                    this.mUIONVIFClientTestToolWindow = new UIONVIFClientTestToolWindow(test);
                }
                return this.mUIONVIFClientTestToolWindow;
            }
        }

        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow();
                }
                return this.mUIOpenWindow;
            }
        }        
        #endregion
        
        #region Fields
        private UIONVIFClientTestToolWindow mUIONVIFClientTestToolWindow;

        private UIOpenWindow mUIOpenWindow;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.50727.1")]
    public class UIONVIFClientTestToolWindow : WinWindow
    {
        
        public UIONVIFClientTestToolWindow(Test test)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.Name] = "ONVIF Client Test Tool";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("ONVIF Client Test Tool");
            #endregion

            this.test = test;
        }
        
        #region Properties
        public UITBPathNetworkTraceWindow UITBPathNetworkTraceWindow
        {
            get
            {
                if ((this.mUITBPathNetworkTraceWindow == null))
                {
                    this.mUITBPathNetworkTraceWindow = new UITBPathNetworkTraceWindow(this);
                }
                return this.mUITBPathNetworkTraceWindow;
            }
        }
        
        public UIAddWindow UIAddWindow
        {
            get
            {
                if ((this.mUIAddWindow == null))
                {
                    this.mUIAddWindow = new UIAddWindow(this);
                }
                return this.mUIAddWindow;
            }
        }
        
        public UIStartParsingWindow UIStartParsingWindow
        {
            get
            {
                if ((this.mUIStartParsingWindow == null))
                {
                    this.mUIStartParsingWindow = new UIStartParsingWindow(this);
                }
                return this.mUIStartParsingWindow;
            }
        }
        
        public UILVUnitsWindow UILVUnitsWindow
        {
            get
            {
                if ((this.mUILVUnitsWindow == null))
                {
                    this.mUILVUnitsWindow = new UILVUnitsWindow(this, test);
                }
                return this.mUILVUnitsWindow;
            }
        }
        
        public UIBrowseWindow UIBrowseWindow
        {
            get
            {
                if ((this.mUIBrowseWindow == null))
                {
                    this.mUIBrowseWindow = new UIBrowseWindow(this);
                }
                return this.mUIBrowseWindow;
            }
        }

        public UISSMainStatusBar UISSMainStatusBar
        {
            get
            {
                if ((this.mUISSMainStatusBar == null))
                {
                    this.mUISSMainStatusBar = new UISSMainStatusBar(this);
                }
                return this.mUISSMainStatusBar;
            }
        }
        #endregion
        
        #region Fields
        private UITBPathNetworkTraceWindow mUITBPathNetworkTraceWindow;
        
        private UIAddWindow mUIAddWindow;
        
        private UIStartParsingWindow mUIStartParsingWindow;
        
        private UILVUnitsWindow mUILVUnitsWindow;
        
        private UIBrowseWindow mUIBrowseWindow;

        private Test test;

        private UISSMainStatusBar mUISSMainStatusBar;
        #endregion
    }    
    
    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.50727.1")]
    public class UITBPathNetworkTraceWindow : WinWindow
    {
        
        public UITBPathNetworkTraceWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "tBPathNetworkTrace";
            this.WindowTitles.Add("ONVIF Client Test Tool");
            #endregion
        }
        
        #region Properties
        public WinEdit UITBPathNetworkTraceEdit
        {
            get
            {
                if ((this.mUITBPathNetworkTraceEdit == null))
                {
                    this.mUITBPathNetworkTraceEdit = new WinEdit(this);
                    #region Условия поиска
                    this.mUITBPathNetworkTraceEdit.WindowTitles.Add("ONVIF Client Test Tool");
                    #endregion
                }
                return this.mUITBPathNetworkTraceEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITBPathNetworkTraceEdit;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.50727.1")]
    public class UIAddWindow : WinWindow
    {
        
        public UIAddWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnAddNetworkTrace";
            this.WindowTitles.Add("ONVIF Client Test Tool");
            #endregion
        }
        
        #region Properties
        public WinButton UIAddButton
        {
            get
            {
                if ((this.mUIAddButton == null))
                {
                    this.mUIAddButton = new WinButton(this);
                    #region Условия поиска
                    this.mUIAddButton.SearchProperties[WinButton.PropertyNames.Name] = "Add...";
                    this.mUIAddButton.WindowTitles.Add("ONVIF Client Test Tool");
                    #endregion
                }
                return this.mUIAddButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIAddButton;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.50727.1")]
    public class UIStartParsingWindow : WinWindow
    {
        
        public UIStartParsingWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnStartTesting";
            this.WindowTitles.Add("ONVIF Client Test Tool");
            #endregion
        }
        
        #region Properties
        public WinButton UIStartParsingButton
        {
            get
            {
                if ((this.mUIStartParsingButton == null))
                {
                    this.mUIStartParsingButton = new WinButton(this);
                    #region Условия поиска
                    this.mUIStartParsingButton.SearchProperties[WinButton.PropertyNames.Name] = "Start Parsing";
                    this.mUIStartParsingButton.WindowTitles.Add("ONVIF Client Test Tool");
                    #endregion
                }
                return this.mUIStartParsingButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIStartParsingButton;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.50727.1")]
    public class UILVUnitsWindow : WinWindow
    {
        public UILVUnitsWindow(UITestControl searchLimitContainer, Test test) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "lVUnits";
            this.WindowTitles.Add("ONVIF Client Test Tool");
            #endregion

            this.test = test;

            if (test.featureDevice != null)
            {
                foreach (string key in test.featureDevice.Keys)
                {
                    keyList.Add(key);
                }
            }
        }
        
        #region Properties
        public WinCheckBox UIItemCheckBox
        {
            get
            {
                this.mUIItemCheckBox = new WinCheckBox(this);
                #region Условия поиска
                int i = 2;

                while (true)
                {
                    this.mUIItemCheckBox.SearchProperties[WinCheckBox.PropertyNames.Instance] = i.ToString();
                    if (this.mUIItemCheckBox.AccessibleDescription.Contains(keyList[key]))
                        break;
                    i++;
                }
                this.mUIItemCheckBox.WindowTitles.Add("ONVIF Client Test Tool");
                #endregion
                
                return this.mUIItemCheckBox;
            }
        }

        public WinList UILVUnitsList
        {
            get
            {
                if ((this.mUILVUnitsList == null))
                {
                    this.mUILVUnitsList = new WinList(this);
                    #region Условия поиска
                    this.mUILVUnitsList.WindowTitles.Add("ONVIF Client Test Tool");
                    #endregion
                }
                return this.mUILVUnitsList;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIItemCheckBox;

        private WinList mUILVUnitsList;

        public Test test = new Test();

        public int key = 0;

        public List<string> keyList = new List<string>();
        #endregion
    }

    public class UISSMainStatusBar : WinStatusBar
    {

        public UISSMainStatusBar(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinStatusBar.PropertyNames.Name] = "Status Strip";
            this.WindowTitles.Add("ONVIF Client Test Tool");
            #endregion
        }

        #region Properties
        public WinText UIItemText
        {
            get
            {
                if ((this.mUIItemText == null))
                {
                    this.mUIItemText = new WinText(this);
                    #region Условия поиска
                    this.mUIItemText.SearchProperties[WinText.PropertyNames.Instance] = "2";
                    this.mUIItemText.WindowTitles.Add("ONVIF Client Test Tool");
                    #endregion
                }
                return this.mUIItemText;
            }
        }
        #endregion

        #region Fields
        private WinText mUIItemText;
        #endregion
    }

    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.50727.1")]
    public class UIBrowseWindow : WinWindow
    {
        
        public UIBrowseWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnBrowseFeatureList";
            this.WindowTitles.Add("ONVIF Client Test Tool");
            #endregion
        }
        
        #region Properties
        public WinButton UIBrowseButton
        {
            get
            {
                if ((this.mUIBrowseButton == null))
                {
                    this.mUIBrowseButton = new WinButton(this);
                    #region Условия поиска
                    this.mUIBrowseButton.SearchProperties[WinButton.PropertyNames.Name] = "Browse";
                    this.mUIBrowseButton.WindowTitles.Add("ONVIF Client Test Tool");
                    #endregion
                }
                return this.mUIBrowseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIBrowseButton;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.50727.1")]
    public class UIOpenWindow : WinWindow
    {

        public UIOpenWindow()
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Открытие";
            //this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Открытие");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }

        public UIOpenWindow1 UIOpenWindow1
        {
            get
            {
                if ((this.mUIOpenWindow1 == null))
                {
                    this.mUIOpenWindow1 = new UIOpenWindow1(this);
                }
                return this.mUIOpenWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;

        private UIOpenWindow1 mUIOpenWindow1;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.50727.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1148";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Открыть");
            #endregion
        }
        
        #region Properties
        public WinEdit UIFilenameEdit
        {
            get
            {
                if ((this.mUIFilenameEdit == null))
                {
                    this.mUIFilenameEdit = new WinEdit(this);
                    #region Условия поиска                   
                    this.mUIFilenameEdit.WindowTitles.Add("Открытие");
                    this.mUIFilenameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "File name:";

                    if (!this.mUIFilenameEdit.Exists)
                    {
                        this.mUIFilenameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Имя файла:";   
                    }
                    #endregion
                }
                return this.mUIFilenameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIFilenameEdit;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.50727.1")]
    public class UIOpenWindow1 : WinWindow
    {

        public UIOpenWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Открыть");
            #endregion
        }
        
        #region Properties
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Условия поиска
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    if (!this.mUIOpenButton.Exists)
                    {
                        this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Открыть";
                        if (!this.mUIOpenButton.Exists)
                        {
                            this.mUIOpenButton = new WinSplitButton(this);

                            this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Открыть";
                            if (!this.mUIOpenButton.Exists)
                            {
                                this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                            }
                        }
                    }
                    this.mUIOpenButton.WindowTitles.Add("Открыть");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOpenButton;
        #endregion
    }
}
