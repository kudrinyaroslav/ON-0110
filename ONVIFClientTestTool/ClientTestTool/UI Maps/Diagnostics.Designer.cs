// ------------------------------------------------------------------------------
//  <auto-generated>
//      Этот код был создан построителем кодированных тестов ИП.
//      Версия: 11.0.0.0
//
//      Изменения, внесенные в этот файл, могут привести к неправильной работе кода и будут
//      утрачены при повторном формировании кода.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace ClientTestTool.UIMaps.DiagnosticsClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;

    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.50727.1")]
    public partial class Diagnostics
    {
        private bool IsStatusDone(UITestControl control)
        {
            control.WaitForControlExist(2700000);
            control.WaitForControlReady(2700000);
            WinText statusText = control as WinText;
            if (statusText.Name == "Done")
                return true;
            else
                return false;
        }
        /// <summary>
        /// RunConformanceTest
        /// </summary>
        public void RunConformanceTest()
        {
            #region Variable Declarations
            WinTabPage uIDiagnosticsTabPage = this.UIONVIFClientTestToolWindow.UITCMainWindow.UIDiagnosticsTabPage;
            //WinButton uIRunConformanceTestButton = this.UIONVIFClientTestToolWindow.UIRunConformanceTestWindow.UIRunConformanceTestButton;
            WinButton uIRunConformanceTestButton = this.UIONVIFClientTestToolWindow.UIM_ToolStripToolBar.UIRunConformanceTestButton;
            WinWindow uIОКWindow = this.UIWarningWindow.UIОКWindow;
            WinList uILVUnitsList = this.UIONVIFClientTestToolWindow.UILVUnitsWindow.UILVUnitsList;
            #endregion
            string stepName = "";
            try
            {
                stepName = "GetFeaturesList";
                foreach (DeviceExpectedResult device in this.test.expectedResults)
                {
                    this.mac = device.deviceMAC;

                    foreach (WinCheckBox listItem in uILVUnitsList.Items)
                    {
                        if (listItem.AccessibleDescription.Contains(device.deviceMAC))
                        {
                            string name = listItem.AccessibleDescription.Substring(listItem.AccessibleDescription.IndexOf("Name: ") + 6, listItem.AccessibleDescription.IndexOf("; MAC", 11) - 12);
                            this.macAndDevice.Add(this.mac, name);
                            break;
                        }
                    }
                }
                WinTabPage uIConformanceTabPage = this.UIONVIFClientTestToolWindow.UITCMainWindow.UIConformanceTabPage;
                WinEdit uITBProductNameEdit = this.UIONVIFClientTestToolWindow.UITBProductNameWindow.UITBProductNameEdit;

                stepName = "OpenConformanceTab";
                uIConformanceTabPage.WaitForControlReady();
                Mouse.Click(uIConformanceTabPage);

                stepName = "GetClientName";
                uITBProductNameEdit.WaitForControlReady();
                this.macAndDevice.Add("deviceName", uITBProductNameEdit.Text);

                // Щелкните "Diagnostics" вкладка
                stepName = "OpenDiagnosticsTab";
                uIDiagnosticsTabPage.WaitForControlReady(10000);
                Mouse.Click(uIDiagnosticsTabPage);

                // Щелкните "Run Conformance Test" кнопка
                stepName = "RunConformance";
                uIRunConformanceTestButton.WaitForControlReady(10000);
                Mouse.Click(uIRunConformanceTestButton);

                stepName = "CheckFeaturesWarningWindow";
                if (uIОКWindow.Exists)
                {
                    WinButton uIОКButton = this.UIWarningWindow.UIОКWindow.UIОКButton;
                    // Щелкните "ОК" кнопка
                    uIОКButton.WaitForControlReady();
                    Mouse.Click(uIОКButton);
                }
                stepName = "WaitingDone";
                WinText text = this.UIONVIFClientTestToolWindow.UISSMainStatusBar.UIItemText;
                System.Threading.Thread.Sleep(1000);
                stepName = "WaitingDone2";
                text.WaitForControlExist(5000);
                stepName = "WaitingDone3";
                System.Threading.Thread.Sleep(1000);
                text.WaitForControlCondition(IsStatusDone, 2700000);
                stepName = "WaitingDone4";
            }
            catch (Exception e)
            {
                throw new Exception(String.Format("Substep Name {0}. /n Message: {1}", stepName, e.Message), e);
            }
        }

        public void CheckExpectedResult()
        {
            this.treeName = "tVTestCases";
            #region Variable Declarations
            WinComboBox uICBConversationsComboBox = this.UIONVIFClientTestToolWindow.UICBConversationsWindow.UICBConversationsComboBox;
            WinEdit uITBOutputEdit = this.UIONVIFClientTestToolWindow.UITBOutputWindow.UITBOutputEdit;
            WinTree uITVTestCasesTree = this.UIONVIFClientTestToolWindow.UITVTestCasesWindow.UITVTestCasesTree;
            WinTabPage uITestDetailsTabPage = this.UIONVIFClientTestToolWindow.UITCLogWindow.UITestDetailsTabPage;
            WinList uILVStepsList = this.UIONVIFClientTestToolWindow.UILVStepsWindow.UILVStepsList;
            #endregion

            if (test.expectedResults != null)
            {
                // Щелкните "Test Details" вкладка
                uITestDetailsTabPage.WaitForControlReady();
                Mouse.Click(uITestDetailsTabPage);

                foreach (DeviceExpectedResult device in test.expectedResults)
                {
                    this.mac = device.deviceMAC;
                    foreach (ExpectedResult result in device.expectedResults)
                    {
                        foreach (string s in result.expectedResult.Keys)
                        {
                            mTree0 = result.parentNode0;
                            mTree1 = result.parentNode1;
                            mTree2 = s;
                            this.mTreeItem = this.UIONVIFClientTestToolWindow.UITVTestCasesWindow.UIProfileSTestCasesTreeItem.UIMediaProfileConfigurTreeItem.UIMEDIAPROFILECONFIGURTreeItem1;

                            bool currentResultNotStarted = false;
                            // Щелкните по элементу дерева
                            this.mTreeItem.WaitForControlExist();
                            Mouse.Click(this.mTreeItem);

                            LogData logData = new LogData();
                            if (uICBConversationsComboBox.Items.Count != 0)
                            {
                                // выбрать элемент в списке устройств
                                uICBConversationsComboBox.SelectedItem = this.macAndDevice["deviceName"] + " - " + this.macAndDevice[this.mac];
                                foreach (WinListItem item in uILVStepsList.Items)
                                {
                                    TestStep testStep = new TestStep();
                                    testStep.results = item.AccessibleDescription;
                                    logData.testSteps.Add(testStep);
                                }
                            }
                            else
                            {
                                currentResultNotStarted = true;
                            }

                            if (currentResultNotStarted)
                            {
                                logData.currentResult = s + " NOT STARTED";
                            }
                            else
                            {
                                if (logData.testSteps.Count == 0)
                                {
                                    logData.currentResult = s + " NOT DETECTED";
                                }
                                else
                                {
                                    if (logData.testSteps.FindAll(C => C.results.Contains("NOT DETECTED")).Count != 0)
                                    {
                                        logData.currentResult = s + " NOT DETECTED";
                                    }
                                    else
                                    {
                                        if (logData.testSteps.FindAll(C => C.results.Contains("FAILED")).Count != 0)
                                        {
                                            logData.currentResult = s + " FAILED";
                                        }
                                        else
                                        {
                                            logData.currentResult = s + " PASSED";
                                        }
                                    }
                                }
                            }

                            logData.expectedResult = s + " " + result.expectedResult[s];
                            if (logData.currentResult == logData.expectedResult)
                            {
                                logData.result = "PASSED";
                            }
                            else
                            {
                                logData.result = "FAILED";
                            }

                            logData.testPath = this.testPath;
                            logData.deviceMAC = this.mac;
                            this.logData.Add(logData);
                        }
                    }
                }
            }
        }

        public void CheckFeaturesExpectedResult()
        {
            this.treeName = "tVFeatures";
            #region Variable Declarations
            WinComboBox uICBConversationsComboBox = this.UIONVIFClientTestToolWindow.UICBConversationsWindow.UICBConversationsComboBox;
            WinEdit uITBOutputEdit = this.UIONVIFClientTestToolWindow.UITBOutputWindow.UITBOutputEdit;
            WinTree uITVTestCasesTree = this.UIONVIFClientTestToolWindow.UITVTestCasesWindow.UITVTestCasesTree;
            WinTabPage uIFeaturesTabPage = this.UIONVIFClientTestToolWindow.UITCModesWindow.UIFeaturesTabPage;
            WinList uILVStepsList = this.UIONVIFClientTestToolWindow.UILVStepsWindow.UILVStepsList;
            #endregion

            if (test.featuresExpectedResult != null)
            {
                // Щелкните "Features" вкладка
                uIFeaturesTabPage.WaitForControlReady();
                Mouse.Click(uIFeaturesTabPage);
                foreach (var featureExpectedResult in test.featuresExpectedResult)
                {
                    mTree0 = featureExpectedResult.Key;
                    this.mTreeItem = this.UIONVIFClientTestToolWindow.UITVTestCasesWindow.UIProfileSTestCasesTreeItem;
                    //this.mTreeItem.();
                    mTreeItem.WaitForControlReady();                    
                    Mouse.Click(this.mTreeItem, new Point(0, 0));
                    Mouse.Hover(this.mTreeItem, new Point(this.mTreeItem.Width / 2, this.mTreeItem.Height / 2));

                    LogData logDataFeature = new LogData();
                    logDataFeature.testPath = testPath;
                    logDataFeature.currentResult = featureExpectedResult.Key + " " + this.mTreeItem.ToolTipText;
                    logDataFeature.expectedResult = featureExpectedResult.Key + " " + featureExpectedResult.Value;
                    if (logDataFeature.currentResult == logDataFeature.expectedResult)
                    {
                        logDataFeature.result = "PASSED";
                    }
                    else
                    {
                        logDataFeature.result = "FAILED";
                    }

                    this.logDataFeatures.Add(logDataFeature);
                }
            }
        }

        #region Properties
        public UIONVIFClientTestToolWindow UIONVIFClientTestToolWindow
        {
            get
            {
                if ((this.mUIONVIFClientTestToolWindow == null))
                {
                    this.mUIONVIFClientTestToolWindow = new UIONVIFClientTestToolWindow(this);
                }
                return this.mUIONVIFClientTestToolWindow;
            }
        }

        public UIWarningWindow UIWarningWindow
        {
            get
            {
                if ((this.mUIWarningWindow == null))
                {
                    this.mUIWarningWindow = new UIWarningWindow();
                }
                return this.mUIWarningWindow;
            }
        }
        #endregion

        #region Fields
        private UIONVIFClientTestToolWindow mUIONVIFClientTestToolWindow;

        private UIWarningWindow mUIWarningWindow;
        private WinTreeItem mTreeItem;
        public string mTree0;
        public string mTree1;
        public string mTree2;
        public string mac;
        #endregion
    }

    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.50727.1")]
    public class UIONVIFClientTestToolWindow : WinWindow
    {

        public UIONVIFClientTestToolWindow(Diagnostics diagnostics)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.Name] = "ONVIF Client Test Tool";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("ONVIF Client Test Tool");
            #endregion

            this.diagnostics = diagnostics;
        }

        #region Properties
        public UITCMainWindow UITCMainWindow
        {
            get
            {
                if ((this.mUITCMainWindow == null))
                {
                    this.mUITCMainWindow = new UITCMainWindow(this);
                }
                return this.mUITCMainWindow;
            }
        }

        public UIRunConformanceTestWindow UIRunConformanceTestWindow
        {
            get
            {
                if ((this.mUIRunConformanceTestWindow == null))
                {
                    this.mUIRunConformanceTestWindow = new UIRunConformanceTestWindow(this);
                }
                return this.mUIRunConformanceTestWindow;
            }
        }

        public UISSMainStatusBar UISSMainStatusBar
        {
            get
            {
                if ((this.mUISSMainStatusBar == null))
                {
                    this.mUISSMainStatusBar = new UISSMainStatusBar(this);
                }
                return this.mUISSMainStatusBar;
            }
        }

        public UITBOutputWindow UITBOutputWindow
        {
            get
            {
                if ((this.mUITBOutputWindow == null))
                {
                    this.mUITBOutputWindow = new UITBOutputWindow(this);
                }
                return this.mUITBOutputWindow;
            }
        }

        public UITVTestCasesWindow UITVTestCasesWindow
        {
            get
            {
                this.mUITVTestCasesWindow = new UITVTestCasesWindow(this, this.diagnostics);
                return this.mUITVTestCasesWindow;
            }
        }

        public UITCLogWindow UITCLogWindow
        {
            get
            {
                if ((this.mUITCLogWindow == null))
                {
                    this.mUITCLogWindow = new UITCLogWindow(this);
                }
                return this.mUITCLogWindow;
            }
        }

        public UILVStepsWindow UILVStepsWindow
        {
            get
            {
                if ((this.mUILVStepsWindow == null))
                {
                    this.mUILVStepsWindow = new UILVStepsWindow(this);
                }
                return this.mUILVStepsWindow;
            }
        }

        public UITBRequestWindow UITBRequestWindow
        {
            get
            {
                if ((this.mUITBRequestWindow == null))
                {
                    this.mUITBRequestWindow = new UITBRequestWindow(this);
                }
                return this.mUITBRequestWindow;
            }
        }

        public UITBResponseWindow UITBResponseWindow
        {
            get
            {
                if ((this.mUITBResponseWindow == null))
                {
                    this.mUITBResponseWindow = new UITBResponseWindow(this);
                }
                return this.mUITBResponseWindow;
            }
        }

        public UICBConversationsWindow UICBConversationsWindow
        {
            get
            {
                if ((this.mUICBConversationsWindow == null))
                {
                    this.mUICBConversationsWindow = new UICBConversationsWindow(this);
                }
                return this.mUICBConversationsWindow;
            }
        }

        public UILVUnitsWindow UILVUnitsWindow
        {
            get
            {
                if ((this.mUILVUnitsWindow == null))
                {
                    this.mUILVUnitsWindow = new UILVUnitsWindow(this, this.diagnostics);
                }
                return this.mUILVUnitsWindow;
            }
        }

        public UITCModesWindow UITCModesWindow
        {
            get
            {
                if ((this.mUITCModesWindow == null))
                {
                    this.mUITCModesWindow = new UITCModesWindow(this);
                }
                return this.mUITCModesWindow;
            }
        }

        public UITBProductNameWindow UITBProductNameWindow
        {
            get
            {
                if ((this.mUITBProductNameWindow == null))
                {
                    this.mUITBProductNameWindow = new UITBProductNameWindow(this);
                }
                return this.mUITBProductNameWindow;
            }
        }

        public UIM_ToolStripToolBar UIM_ToolStripToolBar
        {
            get
            {
                if ((this.mUIM_ToolStripToolBar == null))
                {
                    this.mUIM_ToolStripToolBar = new UIM_ToolStripToolBar(this);
                }
                return this.mUIM_ToolStripToolBar;
            }
        }
        #endregion

        #region Fields
        private UITCMainWindow mUITCMainWindow;

        private UIRunConformanceTestWindow mUIRunConformanceTestWindow;

        private UISSMainStatusBar mUISSMainStatusBar;

        private UITBOutputWindow mUITBOutputWindow;

        private UITVTestCasesWindow mUITVTestCasesWindow;

        private UITCLogWindow mUITCLogWindow;

        private UILVStepsWindow mUILVStepsWindow;

        private UITBRequestWindow mUITBRequestWindow;

        private UITBResponseWindow mUITBResponseWindow;

        private UICBConversationsWindow mUICBConversationsWindow;

        private UILVUnitsWindow mUILVUnitsWindow;

        private Diagnostics diagnostics;

        private UITCModesWindow mUITCModesWindow;

        private UITBProductNameWindow mUITBProductNameWindow;

        private UIM_ToolStripToolBar mUIM_ToolStripToolBar;
        #endregion
    }

    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.50727.1")]
    public class UITBProductNameWindow : WinWindow
    {

        public UITBProductNameWindow(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "tBProductName";
            this.WindowTitles.Add("ONVIF Client Test Tool");
            #endregion
        }

        #region Properties
        public WinEdit UITBProductNameEdit
        {
            get
            {
                if ((this.mUITBProductNameEdit == null))
                {
                    this.mUITBProductNameEdit = new WinEdit(this);
                    #region Условия поиска
                    this.mUITBProductNameEdit.WindowTitles.Add("ONVIF Client Test Tool");
                    #endregion
                }
                return this.mUITBProductNameEdit;
            }
        }
        #endregion

        #region Fields
        private WinEdit mUITBProductNameEdit;
        #endregion
    }

    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.50727.1")]
    public class UITCModesWindow : WinWindow
    {

        public UITCModesWindow(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "tCModes";
            this.WindowTitles.Add("ONVIF Client Test Tool");
            #endregion
        }

        #region Properties
        public WinTabPage UIFeaturesTabPage
        {
            get
            {
                if ((this.mUIFeaturesTabPage == null))
                {
                    this.mUIFeaturesTabPage = new WinTabPage(this);
                    #region Условия поиска
                    this.mUIFeaturesTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Features";
                    this.mUIFeaturesTabPage.WindowTitles.Add("ONVIF Client Test Tool");
                    #endregion
                }
                return this.mUIFeaturesTabPage;
            }
        }
        #endregion

        #region Fields
        private WinTabPage mUIFeaturesTabPage;
        #endregion
    }

    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.50727.1")]
    public class UILVUnitsWindow : WinWindow
    {
        public UILVUnitsWindow(UITestControl searchLimitContainer, Diagnostics diagnostics) :
            base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "lVUnits";
            this.WindowTitles.Add("ONVIF Client Test Tool");
            #endregion

            this.diagnostics = diagnostics;
        }

        #region Properties
        public WinCheckBox UIItemCheckBox
        {
            get
            {
                this.mUIItemCheckBox = new WinCheckBox(this);
                #region Условия поиска
                int i = 2;

                while (true)
                {
                    this.mUIItemCheckBox.SearchProperties[WinCheckBox.PropertyNames.Instance] = i.ToString();
                    if (this.mUIItemCheckBox.AccessibleDescription.Contains(diagnostics.mac))
                        break;
                    i++;
                }
                this.mUIItemCheckBox.WindowTitles.Add("ONVIF Client Test Tool");
                #endregion

                return this.mUIItemCheckBox;
            }
        }

        public WinList UILVUnitsList
        {
            get
            {
                if ((this.mUILVUnitsList == null))
                {
                    this.mUILVUnitsList = new WinList(this);
                    #region Условия поиска
                    this.mUILVUnitsList.WindowTitles.Add("ONVIF Client Test Tool");
                    #endregion
                }
                return this.mUILVUnitsList;
            }
        }
        #endregion

        #region Properties
        public WinCheckBox UIItemCheckBoxFirst
        {
            get
            {
                this.mUIItemCheckBoxFirst = new WinCheckBox(this);
                #region Условия поиска
                this.mUIItemCheckBoxFirst.SearchProperties[WinCheckBox.PropertyNames.Instance] = "1";
                this.mUIItemCheckBoxFirst.WindowTitles.Add("ONVIF Client Test Tool");
                #endregion

                return this.mUIItemCheckBoxFirst;
            }
        }
        #endregion
        #region Fields

        private WinList mUILVUnitsList;

        private WinCheckBox mUIItemCheckBox;

        private WinCheckBox mUIItemCheckBoxFirst;

        private Diagnostics diagnostics;

        public Test test = new Test();

        public int key = 0;

        public List<string> keyList = new List<string>();
        #endregion
    }

    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.50727.1")]
    public class UICBConversationsWindow : WinWindow
    {

        public UICBConversationsWindow(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cBConversations";
            this.WindowTitles.Add("ONVIF Client Test Tool");
            #endregion
        }

        #region Properties
        public WinComboBox UICBConversationsComboBox
        {
            get
            {
                if ((this.mUICBConversationsComboBox == null))
                {
                    this.mUICBConversationsComboBox = new WinComboBox(this);
                    #region Условия поиска
                    this.mUICBConversationsComboBox.WindowTitles.Add("ONVIF Client Test Tool");
                    #endregion
                }
                return this.mUICBConversationsComboBox;
            }
        }
        #endregion

        #region Fields
        private WinComboBox mUICBConversationsComboBox;
        #endregion
    }

    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.50727.1")]
    public class UITBRequestWindow : WinWindow
    {

        public UITBRequestWindow(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "tBRequest";
            this.WindowTitles.Add("ONVIF Client Test Tool");
            #endregion
        }

        #region Properties
        public WinEdit UITBRequestEdit
        {
            get
            {
                if ((this.mUITBRequestEdit == null))
                {
                    this.mUITBRequestEdit = new WinEdit(this);
                    #region Условия поиска
                    this.mUITBRequestEdit.WindowTitles.Add("ONVIF Client Test Tool");
                    #endregion
                }
                return this.mUITBRequestEdit;
            }
        }
        #endregion

        #region Fields
        private WinEdit mUITBRequestEdit;
        #endregion
    }

    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.50727.1")]
    public class UITBResponseWindow : WinWindow
    {

        public UITBResponseWindow(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "tBResponse";
            this.WindowTitles.Add("ONVIF Client Test Tool");
            #endregion
        }

        #region Properties
        public WinEdit UITBResponseEdit
        {
            get
            {
                if ((this.mUITBResponseEdit == null))
                {
                    this.mUITBResponseEdit = new WinEdit(this);
                    #region Условия поиска
                    this.mUITBResponseEdit.WindowTitles.Add("ONVIF Client Test Tool");
                    #endregion
                }
                return this.mUITBResponseEdit;
            }
        }
        #endregion

        #region Fields
        private WinEdit mUITBResponseEdit;
        #endregion
    }

    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.50727.1")]
    public class UILVStepsWindow : WinWindow
    {

        public UILVStepsWindow(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "lVSteps";
            this.WindowTitles.Add("ONVIF Client Test Tool");
            #endregion
        }

        #region Properties
        public WinListItem UIItem1ListItem
        {
            get
            {
                if ((this.mUIItem1ListItem == null))
                {
                    this.mUIItem1ListItem = new WinListItem(this);
                    #region Условия поиска
                    this.mUIItem1ListItem.SearchProperties[WinListItem.PropertyNames.Name] = "1";
                    this.mUIItem1ListItem.WindowTitles.Add("ONVIF Client Test Tool");
                    #endregion
                }
                return this.mUIItem1ListItem;
            }
        }

        public WinList UILVStepsList
        {
            get
            {
                if ((this.mUILVStepsList == null))
                {
                    this.mUILVStepsList = new WinList(this);
                    #region Условия поиска
                    this.mUILVStepsList.WindowTitles.Add("ONVIF Client Test Tool");
                    #endregion
                }
                return this.mUILVStepsList;
            }
        }
        #endregion

        #region Fields
        private WinListItem mUIItem1ListItem;

        private WinList mUILVStepsList;
        #endregion
    }

    public class UISSMainStatusBar : WinStatusBar
    {

        public UISSMainStatusBar(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinStatusBar.PropertyNames.Name] = "Status Strip";
            this.WindowTitles.Add("ONVIF Client Test Tool");
            #endregion
        }

        #region Properties
        public WinText UIItemText
        {
            get
            {
                if ((this.mUIItemText == null))
                {
                    this.mUIItemText = new WinText(this);
                    #region Условия поиска
                    this.mUIItemText.SearchProperties[WinText.PropertyNames.Instance] = "2";
                    this.mUIItemText.WindowTitles.Add("ONVIF Client Test Tool");
                    #endregion
                }
                return this.mUIItemText;
            }
        }
        #endregion

        #region Fields
        private WinText mUIItemText;
        #endregion
    }

    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.50727.1")]
    public class UITCLogWindow : WinWindow
    {

        public UITCLogWindow(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "tCLog";
            this.WindowTitles.Add("ONVIF Client Test Tool");
            #endregion
        }

        #region Properties
        public WinTabPage UITestDetailsTabPage
        {
            get
            {
                if ((this.mUITestDetailsTabPage == null))
                {
                    this.mUITestDetailsTabPage = new WinTabPage(this);
                    #region Условия поиска
                    this.mUITestDetailsTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Test Details";
                    this.mUITestDetailsTabPage.WindowTitles.Add("ONVIF Client Test Tool");
                    #endregion
                }
                return this.mUITestDetailsTabPage;
            }
        }
        #endregion

        #region Fields
        private WinTabPage mUITestDetailsTabPage;
        #endregion
    }

    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.50727.1")]
    public class UITVTestCasesWindow : WinWindow
    {

        public UITVTestCasesWindow(UITestControl searchLimitContainer, Diagnostics diagnostics) :
            base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = diagnostics.treeName;
            this.WindowTitles.Add("ONVIF Client Test Tool");
            #endregion

            this.diagnostics = diagnostics;
        }

        #region Properties
        public WinTree UITVTestCasesTree
        {
            get
            {
                this.mUITVTestCasesTree = new WinTree(this);
                #region Условия поиска
                this.mUITVTestCasesTree.WindowTitles.Add("ONVIF Client Test Tool");
                #endregion
                return this.mUITVTestCasesTree;
            }
        }

        public UIProfileSTestCasesTreeItem UIProfileSTestCasesTreeItem
        {
            get
            {
                this.mUIProfileSTestCasesTreeItem = new UIProfileSTestCasesTreeItem(this, this.diagnostics);

                return this.mUIProfileSTestCasesTreeItem;
            }
        }
        #endregion

        #region Fields
        private WinTree mUITVTestCasesTree;

        private UIProfileSTestCasesTreeItem mUIProfileSTestCasesTreeItem;

        private Diagnostics diagnostics;
        #endregion
    }

    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.50727.1")]
    public class UIProfileSTestCasesTreeItem : WinTreeItem
    {

        public UIProfileSTestCasesTreeItem(UITestControl searchLimitContainer, Diagnostics diagnostics) :
            base(searchLimitContainer)
        {
            this.diagnostics = diagnostics;

            #region Условия поиска
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = diagnostics.mTree0;
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("ONVIF Client Test Tool");
            #endregion
        }

        #region Properties
        public UIMediaProfileConfigurTreeItem UIMediaProfileConfigurTreeItem
        {
            get
            {

                this.mUIMediaProfileConfigurTreeItem = new UIMediaProfileConfigurTreeItem(this, this.diagnostics);

                return this.mUIMediaProfileConfigurTreeItem;
            }
        }
        #endregion

        #region Fields
        private UIMediaProfileConfigurTreeItem mUIMediaProfileConfigurTreeItem;
        private Diagnostics diagnostics;
        #endregion
    }

    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.50727.1")]
    public class UIMediaProfileConfigurTreeItem : WinTreeItem
    {

        public UIMediaProfileConfigurTreeItem(UITestControl searchLimitContainer, Diagnostics diagnostics) :
            base(searchLimitContainer)
        {
            this.diagnostics = diagnostics;

            #region Условия поиска
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = diagnostics.mTree1;
            this.SearchProperties["Value"] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.WindowTitles.Add("ONVIF Client Test Tool");
            #endregion
        }

        #region Properties
        public WinTreeItem UIMEDIAPROFILECONFIGURTreeItem1
        {
            get
            {

                this.mUIMEDIAPROFILECONFIGURTreeItem1 = new WinTreeItem(this);
                #region Условия поиска
                this.mUIMEDIAPROFILECONFIGURTreeItem1.SearchProperties[WinTreeItem.PropertyNames.Name] = diagnostics.mTree2;
                this.mUIMEDIAPROFILECONFIGURTreeItem1.SearchProperties["Value"] = "2";
                this.mUIMEDIAPROFILECONFIGURTreeItem1.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                this.mUIMEDIAPROFILECONFIGURTreeItem1.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                this.mUIMEDIAPROFILECONFIGURTreeItem1.WindowTitles.Add("ONVIF Client Test Tool");
                #endregion

                return this.mUIMEDIAPROFILECONFIGURTreeItem1;
            }
        }
        #endregion

        #region Fields
        private WinTreeItem mUIMEDIAPROFILECONFIGURTreeItem1;

        private Diagnostics diagnostics;
        #endregion
    }

    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.50727.1")]
    public class UITBOutputWindow : WinWindow
    {

        public UITBOutputWindow(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "tBOutput";
            this.WindowTitles.Add("ONVIF Client Test Tool");
            #endregion
        }

        #region Properties
        public WinEdit UITBOutputEdit
        {
            get
            {
                if ((this.mUITBOutputEdit == null))
                {
                    this.mUITBOutputEdit = new WinEdit(this);
                    #region Условия поиска
                    this.mUITBOutputEdit.WindowTitles.Add("ONVIF Client Test Tool");
                    #endregion
                }
                return this.mUITBOutputEdit;
            }
        }
        #endregion

        #region Fields
        private WinEdit mUITBOutputEdit;
        #endregion
    }

    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.50727.1")]
    public class UITCMainWindow : WinWindow
    {

        public UITCMainWindow(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "tCMain";
            this.WindowTitles.Add("ONVIF Client Test Tool");
            #endregion
        }

        #region Properties
        public WinTabPage UIDiagnosticsTabPage
        {
            get
            {
                if ((this.mUIDiagnosticsTabPage == null))
                {
                    this.mUIDiagnosticsTabPage = new WinTabPage(this);
                    #region Условия поиска
                    this.mUIDiagnosticsTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Diagnostics";
                    this.mUIDiagnosticsTabPage.WindowTitles.Add("ONVIF Client Test Tool");
                    #endregion
                }
                return this.mUIDiagnosticsTabPage;
            }
        }

        public WinTabPage UIConformanceTabPage
        {
            get
            {
                if ((this.mUIConformanceTabPage == null))
                {
                    this.mUIConformanceTabPage = new WinTabPage(this);
                    #region Условия поиска
                    this.mUIConformanceTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Conformance";
                    this.mUIConformanceTabPage.WindowTitles.Add("ONVIF Client Test Tool");
                    #endregion
                }
                return this.mUIConformanceTabPage;
            }
        }
        #endregion

        #region Fields
        private WinTabPage mUIDiagnosticsTabPage;

        private WinEdit mUITBProductNameEdit;

        private WinTabPage mUIConformanceTabPage;
        #endregion
    }

    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.50727.1")]
    public class UIRunConformanceTestWindow : WinWindow
    {

        public UIRunConformanceTestWindow(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnRun";
            this.WindowTitles.Add("ONVIF Client Test Tool");
            #endregion
        }

        #region Properties
        public WinButton UIRunConformanceTestButton
        {
            get
            {
                if ((this.mUIRunConformanceTestButton == null))
                {
                    this.mUIRunConformanceTestButton = new WinButton(this);
                    #region Условия поиска
                    this.mUIRunConformanceTestButton.SearchProperties[WinButton.PropertyNames.Name] = "Run Conformance Test";
                    this.mUIRunConformanceTestButton.WindowTitles.Add("ONVIF Client Test Tool");
                    #endregion
                }
                return this.mUIRunConformanceTestButton;
            }
        }
        #endregion

        #region Fields
        private WinButton mUIRunConformanceTestButton;
        #endregion
    }

    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.50727.1")]
    public class UIWarningWindow : WinWindow
    {

        public UIWarningWindow()
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Warning";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Warning");
            #endregion
        }

        #region Properties
        public UIОКWindow UIОКWindow
        {
            get
            {
                if ((this.mUIОКWindow == null))
                {
                    this.mUIОКWindow = new UIОКWindow(this);
                }
                return this.mUIОКWindow;
            }
        }
        #endregion

        #region Fields
        private UIОКWindow mUIОКWindow;
        #endregion
    }

    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.50727.1")]
    public class UIОКWindow : WinWindow
    {

        public UIОКWindow(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Warning");
            #endregion
        }

        #region Properties
        public WinButton UIОКButton
        {
            get
            {
                if ((this.mUIОКButton == null))
                {
                    this.mUIОКButton = new WinButton(this);
                    #region Условия поиска
                    this.mUIОКButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    if (!this.mUIОКButton.Exists)
                    {
                        this.mUIОКButton.SearchProperties[WinButton.PropertyNames.Name] = "ОК";
                    }
                    this.mUIОКButton.WindowTitles.Add("Warning");
                    #endregion
                }
                return this.mUIОКButton;
            }
        }
        #endregion

        #region Fields
        private WinButton mUIОКButton;
        #endregion
    }

    public class UIM_ToolStripToolBar : WinToolBar
    {

        public UIM_ToolStripToolBar(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "toolStrip2";
            this.WindowTitles.Add("ONVIF Client Test Tool");
            #endregion
        }

        #region Properties
        public WinButton UIRunConformanceTestButton
        {
            get
            {
                if ((this.mUIRunConformanceTestButton == null))
                {
                    this.mUIRunConformanceTestButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIRunConformanceTestButton.SearchProperties[WinButton.PropertyNames.Name] = "Run Conformance Test";
                    this.mUIRunConformanceTestButton.WindowTitles.Add("ONVIF Client Test Tool");
                    #endregion
                }
                return this.mUIRunConformanceTestButton;
            }
        }
        #endregion

        #region Fields
        private WinButton mUIRunConformanceTestButton;
        #endregion
    }
}
