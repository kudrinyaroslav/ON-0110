// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace ClientTestTool.UIMaps.EventClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public partial class Event
    {

        /// <summary>
        /// ClickSupportedEvents
        /// </summary>
        public void ClickSupportedEvents()
        {
            #region Variable Declarations
            WinTabPage uISupportedEventsTabPage = this.UIONVIFClientTestToolWindow.UITabControlWindow.UISupportedEventsTabPage;
            // WinTabPage uISupportedEventsTabPage = this.UIONVIFClientTestToolWindow.UITabControlWindow.UINetworkTraceCapturefTabList.UISupportedEventsTabPage;
            WinWindow uIОКWindow = this.UIWarningWindow.UIОКWindow;
            #endregion

            // Click 'Supported Events' tab
            if (uIОКWindow.Exists)
            {
                WinButton uIОКButton = this.UIWarningWindow.UIОКWindow.UIОКButton;
                // Щелкните "ОК" кнопка
                uIОКButton.WaitForControlReady();
                Mouse.Click(uIОКButton);
            }

            Mouse.Click(uISupportedEventsTabPage, new Point(36, 7));
            //Mouse.Click(uISupportedEventsTabPage, new Point(42, 10));
        }

        /// <summary>
        /// ClickSupportedEvents
        /// </summary>
        public void ClickParsingResults()
        {
            #region Variable Declarations
            WinTabPage uIParsingResultsTabPage = this.UIONVIFClientTestToolWindow.UITabControlWindow.UIParsingResultsTabPage;
            #endregion

            // Click 'Parsing Results' tab
            Mouse.Click(uIParsingResultsTabPage, new Point(38, 6));
        }
    

        /// <summary>
        /// SelectLastReset - Use 'SelectLastResetParams' to pass parameters into this method.
        /// </summary>
        public void SelectLastReset()
        {
            #region Variable Declarations
            WinCheckBoxTreeItem uITns1MonitoringOperatCheckBoxTreeItem = this.UIONVIFClientTestToolWindow.UITreeViewWindow.UIRootNodeCheckBoxTreeItem.UIFirstLevelNodeCheckBoxTreeItem.UISecondLevelNodeCheckBoxTreeItem.UIThirdLevelEventCheckBoxTreeItem;
            #endregion

            // Select 'Common Events' -> 'Monitoring' -> 'Operating Time' -> 'tns1:Monitoring/OperatingTime/LastReset' check box
            uITns1MonitoringOperatCheckBoxTreeItem.Checked = this.SelectLastResetParams.UITns1MonitoringOperatCheckBoxTreeItemChecked;
        }
        
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void CheckEvents(SupportedEvent supportedEvent)
        {
            WinCheckBoxTreeItem uIEventCheckBoxTreeItem = null;
            #region Variable Declarations
            if (supportedEvent.parentNode2 != null)
            {
                uIEventCheckBoxTreeItem = this.UIONVIFClientTestToolWindow.UITreeViewWindow.UIRootNodeCheckBoxTreeItem.UIFirstLevelNodeCheckBoxTreeItem.UISecondLevelNodeCheckBoxTreeItem.UIThirdLevelEventCheckBoxTreeItem;
                this.UIONVIFClientTestToolWindow.UITreeViewWindow.UIRootNodeCheckBoxTreeItem.SetNode(supportedEvent.parentNode0);
                this.UIONVIFClientTestToolWindow.UITreeViewWindow.UIRootNodeCheckBoxTreeItem.UIFirstLevelNodeCheckBoxTreeItem.SetNode(supportedEvent.parentNode1);
                this.UIONVIFClientTestToolWindow.UITreeViewWindow.UIRootNodeCheckBoxTreeItem.UIFirstLevelNodeCheckBoxTreeItem.UISecondLevelNodeCheckBoxTreeItem.SetNode(supportedEvent.parentNode2);
                foreach (string topic in supportedEvent.topicList)
                {
                    this.UIONVIFClientTestToolWindow.UITreeViewWindow.UIRootNodeCheckBoxTreeItem.UIFirstLevelNodeCheckBoxTreeItem.UISecondLevelNodeCheckBoxTreeItem.SetEvent(topic);
                    uIEventCheckBoxTreeItem.Checked = true;
                }
            }
            else
            {
                if (supportedEvent.parentNode1 != null)
                {
                    uIEventCheckBoxTreeItem = this.UIONVIFClientTestToolWindow.UITreeViewWindow.UIRootNodeCheckBoxTreeItem.UIFirstLevelNodeCheckBoxTreeItem.UISecondLevelEventCheckBoxTreeItem;
                    this.UIONVIFClientTestToolWindow.UITreeViewWindow.UIRootNodeCheckBoxTreeItem.SetNode(supportedEvent.parentNode0);
                    this.UIONVIFClientTestToolWindow.UITreeViewWindow.UIRootNodeCheckBoxTreeItem.UIFirstLevelNodeCheckBoxTreeItem.SetNode(supportedEvent.parentNode1);
                    foreach (string topic in supportedEvent.topicList)
                    {
                        this.UIONVIFClientTestToolWindow.UITreeViewWindow.UIRootNodeCheckBoxTreeItem.UIFirstLevelNodeCheckBoxTreeItem.SetEvent(topic);
                        uIEventCheckBoxTreeItem.Checked = true;
                    }
                }
                else
                {
                    uIEventCheckBoxTreeItem = this.UIONVIFClientTestToolWindow.UITreeViewWindow.UIRootNodeCheckBoxTreeItem.UIFirstLevelEventCheckBoxTreeItem;
                    this.UIONVIFClientTestToolWindow.UITreeViewWindow.UIRootNodeCheckBoxTreeItem.SetNode(supportedEvent.parentNode0);
                    foreach (string topic in supportedEvent.topicList)
                    {
                        this.UIONVIFClientTestToolWindow.UITreeViewWindow.UIRootNodeCheckBoxTreeItem.SetEvent(topic);
                        uIEventCheckBoxTreeItem.Checked = true;
                    }
                }
            }
            //WinCheckBoxTreeItem uITns1MonitoringProcesCheckBoxTreeItem = this.UIONVIFClientTestToolWindow.UITreeViewWindow.UICommonEventsCheckBoxTreeItem.UIMonitoringCheckBoxTreeItem.UITns1MonitoringProcesCheckBoxTreeItem;
            //WinCheckBoxTreeItem uITns1MonitoringOperatCheckBoxTreeItem = this.UIONVIFClientTestToolWindow.UITreeViewWindow.UICommonEventsCheckBoxTreeItem.UIMonitoringCheckBoxTreeItem.UIOperatingTimeCheckBoxTreeItem.UITns1MonitoringOperatCheckBoxTreeItem;
            //WinCheckBoxTreeItem uITns1AdvancedsecurityCheckBoxTreeItem = this.UIONVIFClientTestToolWindow.UITreeViewWindow.UIAdvancedSecurityEvenCheckBoxTreeItem.UITns1AdvancedsecurityCheckBoxTreeItem;
            #endregion

            // Select 'Common Events' -> 'Monitoring' -> 'Operating Time' -> 'tns1:Monitoring/OperatingTime/LastReset' check box
            

        }
        
        #region Properties
        public virtual SelectLastResetParams SelectLastResetParams
        {
            get
            {
                if ((this.mSelectLastResetParams == null))
                {
                    this.mSelectLastResetParams = new SelectLastResetParams();
                }
                return this.mSelectLastResetParams;
            }
        }
        
       
        public UIONVIFClientTestToolWindow UIONVIFClientTestToolWindow
        {
            get
            {
                if ((this.mUIONVIFClientTestToolWindow == null))
                {
                    this.mUIONVIFClientTestToolWindow = new UIONVIFClientTestToolWindow();
                }
                return this.mUIONVIFClientTestToolWindow;
            }
        }

        public UIWarningWindow UIWarningWindow
        {
            get
            {
                if ((this.mUIWarningWindow == null))
                {
                    this.mUIWarningWindow = new UIWarningWindow();
                }
                return this.mUIWarningWindow;
            }
        }

        #endregion
        
        #region Fields
        private SelectLastResetParams mSelectLastResetParams;       
       
        private UIONVIFClientTestToolWindow mUIONVIFClientTestToolWindow;
        private UIWarningWindow mUIWarningWindow;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIONVIFClientTestToolWindow : WinWindow
    {

        public UIONVIFClientTestToolWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "ONVIF Client Test Tool";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("ONVIF Client Test Tool");
            #endregion
        }

        #region Properties
        public UITabControlWindow UITabControlWindow
        {
            get
            {
                if ((this.mUITabControlWindow == null))
                {
                    this.mUITabControlWindow = new UITabControlWindow(this);
                }
                return this.mUITabControlWindow;
            }
        }

        public UITreeViewWindow UITreeViewWindow
        {
            get
            {
                if ((this.mUITreeViewWindow == null))
                {
                    this.mUITreeViewWindow = new UITreeViewWindow(this);
                }
                return this.mUITreeViewWindow;
            }
        }
        #endregion

        #region Fields
        private UITabControlWindow mUITabControlWindow;

        private UITreeViewWindow mUITreeViewWindow;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UITabControlWindow : WinWindow
    {

        public UITabControlWindow(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "tabControl";
            this.WindowTitles.Add("ONVIF Client Test Tool");
            #endregion
        }

        #region Properties
        public WinTabPage UISupportedEventsTabPage
        {
            get
            {
                if ((this.mUISupportedEventsTabPage == null))
                {
                    this.mUISupportedEventsTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUISupportedEventsTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Supported Events";
                    this.mUISupportedEventsTabPage.WindowTitles.Add("ONVIF Client Test Tool");
                    #endregion
                }
                return this.mUISupportedEventsTabPage;
            }
        }
        public WinTabPage UIParsingResultsTabPage
        {
            get
            {
                if ((this.mUIParsingResultsTabPage == null))
                {
                    this.mUIParsingResultsTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUIParsingResultsTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Parsing Results";
                    this.mUIParsingResultsTabPage.WindowTitles.Add("ONVIF Client Test Tool");
                    #endregion
                }
                return this.mUIParsingResultsTabPage;
            }
        }
        //public UINetworkTraceCapturefTabList UINetworkTraceCapturefTabList
        //{
        //    get
        //    {
        //        if ((this.mUINetworkTraceCapturefTabList == null))
        //        {
        //            this.mUINetworkTraceCapturefTabList = new UINetworkTraceCapturefTabList(this);
        //        }
        //        return this.mUINetworkTraceCapturefTabList;
        //    }
        //}
        #endregion

        #region Fields
        private WinTabPage mUISupportedEventsTabPage;
        private WinTabPage mUIParsingResultsTabPage;
        //private UINetworkTraceCapturefTabList mUINetworkTraceCapturefTabList;
        #endregion
    }

    //not need in version 16.12 rev 1307
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UINetworkTraceCapturefTabList : WinTabList
    {

        public UINetworkTraceCapturefTabList(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTabList.PropertyNames.Name] = "Network Trace Capture file:";
            this.WindowTitles.Add("ONVIF Client Test Tool");
            #endregion
        }

        #region Properties
        public WinTabPage UISupportedEventsTabPage
        {
            get
            {
                if ((this.mUISupportedEventsTabPage == null))
                {
                    this.mUISupportedEventsTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUISupportedEventsTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Supported Events";
                    this.mUISupportedEventsTabPage.WindowTitles.Add("ONVIF Client Test Tool");
                    #endregion
                }
                return this.mUISupportedEventsTabPage;
            }
        }

        public WinTabPage UIParsingResultsTabPage
        {
            get
            {
                if ((this.mUIParsingResultsTabPage == null))
                {
                    this.mUIParsingResultsTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUIParsingResultsTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Parsing Results";
                    this.mUIParsingResultsTabPage.WindowTitles.Add("ONVIF Client Test Tool");
                    #endregion
                }
                return this.mUIParsingResultsTabPage;
            }
        }
        #endregion

        #region Fields
        private WinTabPage mUISupportedEventsTabPage;
        private WinTabPage mUIParsingResultsTabPage;
        #endregion
    }

    /// <summary>
    /// Parameters to be passed into 'SelectLastReset'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class SelectLastResetParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Common Events' -> 'Monitoring' -> 'Operating Time' -> 'tns1:Monitoring/OperatingTime/LastReset' check box
        /// </summary>
        public bool UITns1MonitoringOperatCheckBoxTreeItemChecked = true;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UITreeViewWindow : WinWindow
    {
        
        public UITreeViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "TreeView";
            this.WindowTitles.Add("ONVIF Client Test Tool");
            #endregion
        }
        
        #region Properties
        public UIRootNodeCheckBoxTreeItem UIRootNodeCheckBoxTreeItem
        {
            get
            {
                if ((this.mUIRootNodeCheckBoxTreeItem == null))
                {
                    this.mUIRootNodeCheckBoxTreeItem = new UIRootNodeCheckBoxTreeItem(this, supportedEvent);
                }
                return this.mUIRootNodeCheckBoxTreeItem;
            }
        }
        
        public UIAdvancedSecurityEvenCheckBoxTreeItem UIAdvancedSecurityEvenCheckBoxTreeItem
        {
            get
            {
                if ((this.mUIAdvancedSecurityEvenCheckBoxTreeItem == null))
                {
                    this.mUIAdvancedSecurityEvenCheckBoxTreeItem = new UIAdvancedSecurityEvenCheckBoxTreeItem(this);
                }
                return this.mUIAdvancedSecurityEvenCheckBoxTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIRootNodeCheckBoxTreeItem mUIRootNodeCheckBoxTreeItem;
        
        private UIAdvancedSecurityEvenCheckBoxTreeItem mUIAdvancedSecurityEvenCheckBoxTreeItem;
        SupportedEvent supportedEvent;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIRootNodeCheckBoxTreeItem : WinCheckBoxTreeItem
    {

        public UIRootNodeCheckBoxTreeItem(UITestControl searchLimitContainer, SupportedEvent supportedEvent) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            //this.SearchProperties[WinCheckBoxTreeItem.PropertyNames.Name] = supportedEvent.parentNode0;
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("ONVIF Client Test Tool");
            #endregion
        }

        public void SetNode(string nodeName)
        {
            this.SearchProperties[WinCheckBoxTreeItem.PropertyNames.Name] = nodeName;
        }

        #region Properties
        public UIFirstLevelNodeCheckBoxTreeItem UIFirstLevelNodeCheckBoxTreeItem
        {
            get
            {
                if ((this.mUIFirstLevelNodeCheckBoxTreeItem == null))
                {
                    this.mUIFirstLevelNodeCheckBoxTreeItem = new UIFirstLevelNodeCheckBoxTreeItem(this);
                }
                return this.mUIFirstLevelNodeCheckBoxTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFirstLevelNodeCheckBoxTreeItem mUIFirstLevelNodeCheckBoxTreeItem;
        private WinCheckBoxTreeItem mUIFirstLevelEventCheckBoxTreeItem;
        #endregion

        #region Properties
        public WinCheckBoxTreeItem UIFirstLevelEventCheckBoxTreeItem
        {
            get
            {
                if ((this.mUIFirstLevelEventCheckBoxTreeItem == null))
                {
                    this.mUIFirstLevelEventCheckBoxTreeItem = new WinCheckBoxTreeItem(this);
                    #region Search Criteria
                    this.mUIFirstLevelEventCheckBoxTreeItem.SearchProperties[WinCheckBoxTreeItem.PropertyNames.Name] = "tns1:Advancedsecurity/Keystore/KeyStatus";
                    this.mUIFirstLevelEventCheckBoxTreeItem.SearchProperties["Value"] = "1";
                    this.mUIFirstLevelEventCheckBoxTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIFirstLevelEventCheckBoxTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIFirstLevelEventCheckBoxTreeItem.WindowTitles.Add("ONVIF Client Test Tool");
                    #endregion
                }
                return this.mUIFirstLevelEventCheckBoxTreeItem;
            }
        }
        #endregion
        public void SetEvent(string eventName)
        {
            this.mUIFirstLevelEventCheckBoxTreeItem.SearchProperties[WinCheckBoxTreeItem.PropertyNames.Name] = eventName;
        }
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIFirstLevelNodeCheckBoxTreeItem : WinCheckBoxTreeItem
    {
        
        public UIFirstLevelNodeCheckBoxTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            //this.SearchProperties[WinCheckBoxTreeItem.PropertyNames.Name] = nodeName;
            this.SearchProperties["Value"] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.WindowTitles.Add("ONVIF Client Test Tool");
            #endregion
        }

        public void SetNode(string nodeName)
        {
            this.SearchProperties[WinCheckBoxTreeItem.PropertyNames.Name] = nodeName;
        }

        #region Properties
        public UISecondLevelNodeCheckBoxTreeItem UISecondLevelNodeCheckBoxTreeItem
        {
            get
            {
                if ((this.mUISecondLevelNodeCheckBoxTreeItem == null))
                {
                    this.mUISecondLevelNodeCheckBoxTreeItem = new UISecondLevelNodeCheckBoxTreeItem(this);
                }
                return this.mUISecondLevelNodeCheckBoxTreeItem;
            }
        }
        
        public WinCheckBoxTreeItem UISecondLevelEventCheckBoxTreeItem
        {
            get
            {
                if ((this.mUISecondLevelEventCheckBoxTreeItem == null))
                {
                    this.mUISecondLevelEventCheckBoxTreeItem = new WinCheckBoxTreeItem(this);
                    #region Search Criteria
                    //this.mUISecondLevelEventCheckBoxTreeItem.SearchProperties[WinCheckBoxTreeItem.PropertyNames.Name] = "tns1:Monitoring/ProcessorUsage";
                    this.mUISecondLevelEventCheckBoxTreeItem.SearchProperties["Value"] = "2";
                    this.mUISecondLevelEventCheckBoxTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISecondLevelEventCheckBoxTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUISecondLevelEventCheckBoxTreeItem.WindowTitles.Add("ONVIF Client Test Tool");
                    #endregion
                }
                return this.mUISecondLevelEventCheckBoxTreeItem;
            }
        }
        #endregion

        public void SetEvent(string eventName)
        {
            this.mUISecondLevelEventCheckBoxTreeItem.SearchProperties[WinCheckBoxTreeItem.PropertyNames.Name] = eventName;
        }

        #region Fields
        private UISecondLevelNodeCheckBoxTreeItem mUISecondLevelNodeCheckBoxTreeItem;
        
        private WinCheckBoxTreeItem mUISecondLevelEventCheckBoxTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISecondLevelNodeCheckBoxTreeItem : WinCheckBoxTreeItem
    {
        
        public UISecondLevelNodeCheckBoxTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            //this.SearchProperties[WinCheckBoxTreeItem.PropertyNames.Name] = "Operating Time";
            this.SearchProperties["Value"] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.WindowTitles.Add("ONVIF Client Test Tool");
            #endregion
        }

        public void SetNode(string nodeName)
        {
            this.SearchProperties[WinCheckBoxTreeItem.PropertyNames.Name] = nodeName;
        }

        #region Properties
        public WinCheckBoxTreeItem UIThirdLevelEventCheckBoxTreeItem
        {
            get
            {
                if ((this.mUIThirdLevelEventCheckBoxTreeItem == null))
                {
                    this.mUIThirdLevelEventCheckBoxTreeItem = new WinCheckBoxTreeItem(this);
                    #region Search Criteria
                    //this.mUITns1MonitoringOperatCheckBoxTreeItem.SearchProperties[WinCheckBoxTreeItem.PropertyNames.Name] = "tns1:Monitoring/OperatingTime/LastReset";
                    this.mUIThirdLevelEventCheckBoxTreeItem.SearchProperties["Value"] = "3";
                    this.mUIThirdLevelEventCheckBoxTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIThirdLevelEventCheckBoxTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIThirdLevelEventCheckBoxTreeItem.WindowTitles.Add("ONVIF Client Test Tool");
                    #endregion
                }
                return this.mUIThirdLevelEventCheckBoxTreeItem;
            }
        }
        #endregion

        public void SetEvent(string eventName)
        {
            this.mUIThirdLevelEventCheckBoxTreeItem.SearchProperties[WinCheckBoxTreeItem.PropertyNames.Name] = eventName;
        }
        
        #region Fields
        private WinCheckBoxTreeItem mUIThirdLevelEventCheckBoxTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIAdvancedSecurityEvenCheckBoxTreeItem : WinCheckBoxTreeItem
    {
        
        public UIAdvancedSecurityEvenCheckBoxTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinCheckBoxTreeItem.PropertyNames.Name] = "Advanced Security Events";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("ONVIF Client Test Tool");
            #endregion
        }
        
        #region Properties
        public WinCheckBoxTreeItem UITns1AdvancedsecurityCheckBoxTreeItem
        {
            get
            {
                if ((this.mUITns1AdvancedsecurityCheckBoxTreeItem == null))
                {
                    this.mUITns1AdvancedsecurityCheckBoxTreeItem = new WinCheckBoxTreeItem(this);
                    #region Search Criteria
                    //this.mUITns1AdvancedsecurityCheckBoxTreeItem.SearchProperties[WinCheckBoxTreeItem.PropertyNames.Name] = "tns1:Advancedsecurity/Keystore/KeyStatus";
                    this.mUITns1AdvancedsecurityCheckBoxTreeItem.SearchProperties["Value"] = "1";
                    this.mUITns1AdvancedsecurityCheckBoxTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUITns1AdvancedsecurityCheckBoxTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUITns1AdvancedsecurityCheckBoxTreeItem.WindowTitles.Add("ONVIF Client Test Tool");
                    #endregion
                }
                return this.mUITns1AdvancedsecurityCheckBoxTreeItem;
            }
        }
        #endregion
        public void SetEvent(string eventName)
        {
            this.mUITns1AdvancedsecurityCheckBoxTreeItem.SearchProperties[WinCheckBoxTreeItem.PropertyNames.Name] = eventName;
        }
        #region Fields
        private WinCheckBoxTreeItem mUITns1AdvancedsecurityCheckBoxTreeItem;
        #endregion
    }

    
    public class UIWarningWindow : WinWindow
    {

        public UIWarningWindow()
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Warning";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Warning");
            #endregion
        }

        #region Properties
        public UIОКWindow UIОКWindow
        {
            get
            {
                if ((this.mUIОКWindow == null))
                {
                    this.mUIОКWindow = new UIОКWindow(this);
                }
                return this.mUIОКWindow;
            }
        }
        #endregion

        #region Fields
        private UIОКWindow mUIОКWindow;
        #endregion
    }

    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.50727.1")]
    public class UIОКWindow : WinWindow
    {

        public UIОКWindow(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Warning");
            #endregion
        }

        #region Properties
        public WinButton UIОКButton
        {
            get
            {
                if ((this.mUIОКButton == null))
                {
                    this.mUIОКButton = new WinButton(this);
                    #region Условия поиска
                    this.mUIОКButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    if (!this.mUIОКButton.Exists)
                    {
                        this.mUIОКButton.SearchProperties[WinButton.PropertyNames.Name] = "ОК";
                    }
                    this.mUIОКButton.WindowTitles.Add("Warning");
                    #endregion
                }
                return this.mUIОКButton;
            }
        }
        #endregion

        #region Fields
        private WinButton mUIОКButton;
        #endregion
    }
}
