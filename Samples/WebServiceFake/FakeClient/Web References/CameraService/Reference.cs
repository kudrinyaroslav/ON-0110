//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3607
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.3607.
// 
#pragma warning disable 1591

namespace FakeClient.CameraService {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CameraServiceSoap", Namespace="http://www.onvif.org/ver10/device/wsdl")]
    public partial class CameraService : Microsoft.Web.Services3.WebServicesClientProtocol  {
        
        private System.Threading.SendOrPostCallback GetClientCertificateModeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetClientCertificateModeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetZeroConfigurationOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetAccessPolicyOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public CameraService() {
            this.Url = global::FakeClient.Properties.Settings.Default.FakeClient_CameraService_CameraService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetClientCertificateModeCompletedEventHandler GetClientCertificateModeCompleted;
        
        /// <remarks/>
        public event SetClientCertificateModeCompletedEventHandler SetClientCertificateModeCompleted;
        
        /// <remarks/>
        public event SetZeroConfigurationCompletedEventHandler SetZeroConfigurationCompleted;
        
        /// <remarks/>
        public event SetAccessPolicyCompletedEventHandler SetAccessPolicyCompleted;
        
        /// <remarks/>
        [FakeClient.XmlStreamSoapExtension()]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.onvif.org/ver10/device/wsdl/GetClientCertificateMode", RequestNamespace="http://www.onvif.org/ver10/device/wsdl", ResponseNamespace="http://www.onvif.org/ver10/device/wsdl", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetClientCertificateMode() {
            object[] results = this.Invoke("GetClientCertificateMode", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetClientCertificateModeAsync() {
            this.GetClientCertificateModeAsync(null);
        }
        
        /// <remarks/>
        public void GetClientCertificateModeAsync(object userState) {
            if ((this.GetClientCertificateModeOperationCompleted == null)) {
                this.GetClientCertificateModeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetClientCertificateModeOperationCompleted);
            }
            this.InvokeAsync("GetClientCertificateMode", new object[0], this.GetClientCertificateModeOperationCompleted, userState);
        }
        
        private void OnGetClientCertificateModeOperationCompleted(object arg) {
            if ((this.GetClientCertificateModeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetClientCertificateModeCompleted(this, new GetClientCertificateModeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.onvif.org/ver10/device/wsdl/SetClientCertificateMode", RequestNamespace="http://www.onvif.org/ver10/device/wsdl", ResponseNamespace="http://www.onvif.org/ver10/device/wsdl", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetClientCertificateMode(bool mode) {
            this.Invoke("SetClientCertificateMode", new object[] {
                        mode});
        }
        
        /// <remarks/>
        public void SetClientCertificateModeAsync(bool mode) {
            this.SetClientCertificateModeAsync(mode, null);
        }
        
        /// <remarks/>
        public void SetClientCertificateModeAsync(bool mode, object userState) {
            if ((this.SetClientCertificateModeOperationCompleted == null)) {
                this.SetClientCertificateModeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetClientCertificateModeOperationCompleted);
            }
            this.InvokeAsync("SetClientCertificateMode", new object[] {
                        mode}, this.SetClientCertificateModeOperationCompleted, userState);
        }
        
        private void OnSetClientCertificateModeOperationCompleted(object arg) {
            if ((this.SetClientCertificateModeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetClientCertificateModeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.onvif.org/ver10/device/wsdl/SetZeroConfiguration", RequestNamespace="http://www.onvif.org/ver10/device/wsdl", ResponseNamespace="http://www.onvif.org/ver10/device/wsdl", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetZeroConfiguration(string interfaceToken, bool enabled) {
            this.Invoke("SetZeroConfiguration", new object[] {
                        interfaceToken,
                        enabled});
        }
        
        /// <remarks/>
        public void SetZeroConfigurationAsync(string interfaceToken, bool enabled) {
            this.SetZeroConfigurationAsync(interfaceToken, enabled, null);
        }
        
        /// <remarks/>
        public void SetZeroConfigurationAsync(string interfaceToken, bool enabled, object userState) {
            if ((this.SetZeroConfigurationOperationCompleted == null)) {
                this.SetZeroConfigurationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetZeroConfigurationOperationCompleted);
            }
            this.InvokeAsync("SetZeroConfiguration", new object[] {
                        interfaceToken,
                        enabled}, this.SetZeroConfigurationOperationCompleted, userState);
        }
        
        private void OnSetZeroConfigurationOperationCompleted(object arg) {
            if ((this.SetZeroConfigurationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetZeroConfigurationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.onvif.org/ver10/device/wsdl/SetAccessPolicy", RequestNamespace="http://www.onvif.org/ver10/device/wsdl", ResponseNamespace="http://www.onvif.org/ver10/device/wsdl", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetAccessPolicy(object policy) {
            this.Invoke("SetAccessPolicy", new object[] {
                        policy});
        }
        
        /// <remarks/>
        public void SetAccessPolicyAsync(object policy) {
            this.SetAccessPolicyAsync(policy, null);
        }
        
        /// <remarks/>
        public void SetAccessPolicyAsync(object policy, object userState) {
            if ((this.SetAccessPolicyOperationCompleted == null)) {
                this.SetAccessPolicyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetAccessPolicyOperationCompleted);
            }
            this.InvokeAsync("SetAccessPolicy", new object[] {
                        policy}, this.SetAccessPolicyOperationCompleted, userState);
        }
        
        private void OnSetAccessPolicyOperationCompleted(object arg) {
            if ((this.SetAccessPolicyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetAccessPolicyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetClientCertificateModeCompletedEventHandler(object sender, GetClientCertificateModeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetClientCertificateModeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetClientCertificateModeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void SetClientCertificateModeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void SetZeroConfigurationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void SetAccessPolicyCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591