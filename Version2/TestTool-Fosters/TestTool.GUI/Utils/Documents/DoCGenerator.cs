using System;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Linq;
using TestTool.GUI.Properties;
using TestTool.Tests.Definitions.Enums;
using iTextSharp.text;
using iTextSharp.text.pdf;
using Font = iTextSharp.text.Font;
using Image = iTextSharp.text.Image;

namespace TestTool.GUI.Utils
{
    /// <summary>
    /// Creates Declaration of Conformance.
    /// </summary>
    class DoCGenerator : PdfReportGenerator
    {
        #region Constants

        private const string Title = "Declaration  of Conformance – Device";
        private const string FirstParagraphText = "This Declaration of Conformance is issued by the indicated Member which is solely responsible for declared conformance. Conformance  is valid ONLY for the device identified when used in a manner consistent with the intent of the referenced documents.";
        private const string OnvifLogoText = "Driving IP-based physical security through global standardization";
        
        private const string FeatureListAccompanied = "This Declaration of Conformance MUST be accompanied by the Feature List generated by the ONVIF Device Test Tool";
        private const string TestReportAccompanied = "This Declaration of Conformance MUST be accompanied by the Test Report  generated by the ONVIF Device Test Tool";
        
        #endregion

        #region Overrides

        protected override void GenerateDocumentContent()
        {
            GeneratePage(Document, Log);
        }

        protected override void CustomDocumentInitialization()
        {
            Document.SetMargins(50, 50, 80, 50);

            // Our custom Header and Footer is done using Event Handler
            Writer.PageEvent = InitializeCustomPageEventHandler();
        }

        #endregion

        #region Private Methods

        private void GeneratePage(Document document, Data.TestLogFull data)
        {
            var newLine = CreateParagraph(Environment.NewLine
                                       , FontFactory.GetFont(FontFactory.TIMES_BOLD, 10)
                                       , Element.ALIGN_CENTER);
            var title = CreateParagraph(Title
                                       , FontFactory.GetFont(FontFactory.TIMES_BOLD, 14)
                                       , Element.ALIGN_CENTER);
            document.Add(title);
            document.Add(newLine);
            var firstParagraph = CreateParagraph(FirstParagraphText
                                                , FontFactory.GetFont("Arial", 10)
                                                , Element.ALIGN_JUSTIFIED);
            document.Add(firstParagraph);
            document.Add(newLine);
            AddResponsibleMethodTable(document, data);
            document.Add(newLine);
            AddDeviceTable(document, data);
            document.Add(newLine);
            AddSpecificationsTable(document, data);
            document.Add(newLine);
            AddAutorizationTable(document);
        }

        private void AddAutorizationTable(Document document)
        {
            int maxLength = 59;
            var rows = new Dictionary<string, string>();
            rows.Add("Signature:", new string('_', maxLength));
            rows.Add("Name:", new string('_', maxLength));
            rows.Add("Title and department:", new string('_', maxLength));
            rows.Add("Date:", new string('_', maxLength));

            var table = CreateReportTable(rows
                                         ,"Signature of Authorized Representative:"
                                         , FontFactory.GetFont("Arial", 10)
                                         , null, null);

            table.SetWidthPercentage(new float[]
                                             {
                                                 document.PageSize.Width * 0.25F, 
                                                 document.PageSize.Width * 0.75F
                                             }
                                     , document.PageSize);
            document.Add(table);

            var paragraph = CreateParagraph(FeatureListAccompanied
                                           , FontFactory.GetFont("Arial", 9)
                                           , Element.ALIGN_JUSTIFIED);
            document.Add(paragraph);
        }

        private void AddSpecificationsTable(Document document, Data.TestLogFull data)
        {
            var maxLength = 53;
            var countOfFailedTests = data.TestResults.Count(item => item.Value.Log.TestStatus == TestTool.Tests.Definitions.Trace.TestStatus.Failed);
            var isConformanceFailed = countOfFailedTests > 0
                                   || data.InitializationData.FailedProfiles.Count > 0
                                   || data.InitializationData.SupportedProfiles.Count == 0;
            var rows = new Dictionary<string, string>();
            rows.Add("Profile:", (isConformanceFailed)
                                     ? new string('_', maxLength)
                                     : string.Join("; ", data.InitializationData.SupportedProfiles.Select(item => item.Name).ToArray()));
            rows.Add("ONVIF Device Test Tool version:", data.Application.ToolVersion);

            if (isConformanceFailed)
            {
                rows.Add("Tool test result:", string.Format("FAILED TEST CASES: {0} ", countOfFailedTests));
                rows.Add("Applicable Test Tool errata:", new string('_', maxLength));
            }
            var table = CreateReportTable(rows
                                         , "The device identified above conforms to the following specifications:"
                                         , FontFactory.GetFont("Arial", 10)
                                         , isConformanceFailed ? TestReportAccompanied : null
                                         , isConformanceFailed ? FontFactory.GetFont("Arial", 9) : null);

            table.SetWidthPercentage(new float[]
                                         {
                                             document.PageSize.Width * 0.32F, 
                                             document.PageSize.Width * 0.68F
                                         }
                                     , document.PageSize);

            document.Add(table);

        }

        private void AddDeviceTable(Document document, Data.TestLogFull data)
        {
            var features = new []
                            {
                                string.Format("PTZ:   {0}"
                                             , (data.Features != null && data.Features.Contains(Feature.PTZService)) 
                                                   ? "Yes" 
                                                   : "NO"),
                                string.Format("Audio: {0}"
                                             , (data.Features != null && data.Features.Contains(Feature.Audio)) 
                                                   ? "Yes" 
                                                   : "NO"),
                                string.Format("I/O:   {0}"
                                             , (data.Features != null && data.Features.Contains(Feature.DeviceIORelayOutputs)) 
                                                   ? "Yes" 
                                                   : "NO"),
                            };

            var table = CreateReportTable(new Dictionary<string, string>
                                              {
                                                  {"Product name:", data.DeviceInfo.ProductName},
                                                  {"Product firmware version:", data.DeviceInformation.FirmwareVersion},
                                                  //{"Product hardware id:", data.DeviceInformation.HardwareID},
                                                  {"Device features:", string.Join(Environment.NewLine
                                                                                  , features)},
                                              }
                                         , "Device:"
                                         , FontFactory.GetFont("Arial", 10)
                                         , null, null);
            table.SetWidthPercentage(new float[]
                                             {
                                                 document.PageSize.Width * 0.32F, 
                                                 document.PageSize.Width * 0.68F
                                             }
                                     , document.PageSize);
            document.Add(table);
        }

        private void AddResponsibleMethodTable(Document document, Data.TestLogFull data)
        {
            var table = CreateReportTable(new Dictionary<string, string>
                                              {
                                                  {"Member name:", data.MemberInfo.Name} ,
                                                  {"Member address", data.MemberInfo.Address}
                                              }
                                         , "Responsible member:"
                                         , FontFactory.GetFont("Arial", 10)
                                         , null, null);
            table.SetWidthPercentage(new float[]
                                             {
                                                 document.PageSize.Width * 0.25F, 
                                                 document.PageSize.Width * 0.75F
                                             }
                                     , document.PageSize);
            document.Add(table);
        }

        private PdfPTable CreateReportTable(Dictionary<string, string> rows
                                           , string title
                                           , Font font
                                           , string foother
                                           , Font footherFont)
        {
            var table = new PdfPTable(2);
            table.HorizontalAlignment = Element.ALIGN_LEFT;

            #region create title cell
            var titleParagraph = CreateParagraph(title + Environment.NewLine
                                                 , FontFactory.GetFont("Arial", 10)
                                                 , Element.ALIGN_LEFT);
            var titleCell = new PdfPCell(titleParagraph);
            titleCell.Colspan = 2;
            titleCell.BorderWidth = 0;
            //titleCell.HorizontalAlignment = Element.ALIGN_LEFT;
            table.AddCell(titleCell);
            #endregion

            for (int i = 0; i < rows.Count; i++)
            {
                var fieldNameCell = new PdfPCell(new Phrase(rows.ElementAt(i).Key, font));
                var valueCell = new PdfPCell(new Phrase(rows.ElementAt(i).Value, font));
                #region paddings
                fieldNameCell.Padding = 5;
                fieldNameCell.PaddingTop = 8;
                fieldNameCell.PaddingBottom = 8;
                valueCell.Padding = 5;
                valueCell.PaddingTop = 8;
                valueCell.PaddingBottom = 8;
                #endregion
                #region Compute borders visibility
                if (i > 0)
                {
                    fieldNameCell.BorderWidthTop = 0;
                    valueCell.BorderWidthTop = 0;
                }
                if (i < rows.Count - 1 || !string.IsNullOrEmpty(foother))
                {
                    fieldNameCell.BorderWidthBottom = 0;
                    valueCell.BorderWidthBottom = 0;
                }
                fieldNameCell.BorderWidthRight = 0;
                valueCell.BorderWidthLeft = 0;
                #endregion
                table.AddCell(fieldNameCell);
                table.AddCell(valueCell);
            }

            if (!string.IsNullOrEmpty(foother))
            { 
                var footherCell = new PdfPCell(new Phrase(foother, footherFont ?? font));
                footherCell.Colspan = 2;
                footherCell.HorizontalAlignment = Element.ALIGN_LEFT;
                footherCell.BorderWidthTop = 0;
                footherCell.Padding = 5;
                footherCell.PaddingTop = 8;
                table.AddCell(footherCell);
            }

            table.ElementComplete = true;
            return table;
        }

        private Paragraph CreateParagraph(string text, Font font, int align)
        {
            var paragraph = new Paragraph(text, font);
            paragraph.Alignment = align;
            return paragraph;
        }

        private CustomPageEventHelper InitializeCustomPageEventHandler()
        {
            var pageEventHandler = new CustomPageEventHelper();

            // Define the page header
            pageEventHandler.HeaderLogo = GetPdfImage(Resources.OnvifLogo);
            pageEventHandler.HeaderText = OnvifLogoText;
            pageEventHandler.HeaderFont = FontFactory.GetFont("Arial Narrow", 8, iTextSharp.text.Color.GRAY);

            // Define the page foother
            pageEventHandler.FooterFont = FontFactory.GetFont("Arial", 10, iTextSharp.text.Color.GRAY);
            pageEventHandler.FootherFirst = "ONVIF";
            pageEventHandler.FootherSecond = "www.onvif.org";
            pageEventHandler.FootherThird = "info@onvif.org";

            return pageEventHandler;
        }

        private Image GetPdfImage(Bitmap image)
        {
            using (var stream = new MemoryStream())
            {
                image.Save(stream, ImageFormat.Bmp);
                stream.Position = 0;
                return iTextSharp.text.Image.GetInstance(stream);
            }
        }

        #endregion
    }
}
