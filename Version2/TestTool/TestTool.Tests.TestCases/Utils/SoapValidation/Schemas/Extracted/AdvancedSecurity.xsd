<?xml version="1.0" encoding="utf-8"?>
<xs:schema xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:tas="http://www.onvif.org/ver10/advancedsecurity/wsdl" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" targetNamespace="http://www.onvif.org/ver10/advancedsecurity/wsdl" version="1.1-draft2">
			<!--===================================================-->
			<!-- Data types used by the advanced security features -->
			<!--===================================================-->
			<xs:simpleType name="KeyID">
        <xs:annotation>
          <xs:documentation>Unique identifier for keys in the keystore.</xs:documentation>
        </xs:annotation>
				<xs:restriction base="xs:NCName"/>
			</xs:simpleType>
			<!--===============================-->
			<xs:simpleType name="CertificateID">
        <xs:annotation>
          <xs:documentation>Unique identifier for certificates in the keystore.</xs:documentation>
        </xs:annotation>
				<xs:restriction base="xs:NCName"/>
			</xs:simpleType>
			<!--===============================-->
			<xs:simpleType name="CertificationPathID">
        <xs:annotation>
          <xs:documentation>Unique identifier for certification paths in the keystore.</xs:documentation>
        </xs:annotation>
				<xs:restriction base="xs:NCName"/>
			</xs:simpleType>
      <!--===============================-->
      <xs:simpleType name="PassphraseID">
				<xs:restriction base="xs:NCName">
          <xs:annotation>
						<xs:documentation>Unique identifier for passphrases in the keystore.</xs:documentation>
					</xs:annotation>
				</xs:restriction>
			</xs:simpleType>
			<!--===============================-->
			<xs:simpleType name="Dot1XID">
				<xs:restriction base="xs:NCName">
					<xs:annotation>
						<xs:documentation>Unique identifier for 802.1X configurations in the keystore.</xs:documentation>
          </xs:annotation>
        </xs:restriction>
      </xs:simpleType>
			<!--===============================-->
			<xs:simpleType name="KeyStatus">
				<xs:annotation>
					<xs:documentation>The status of a key in the keystore.</xs:documentation>
				</xs:annotation>
				<xs:restriction base="xs:string">
					<xs:enumeration value="ok">
						<xs:annotation>
							<xs:documentation>Key is ready for use</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="generating">
						<xs:annotation>
							<xs:documentation>Key is being generated</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="corrupt">
						<xs:annotation>
							<xs:documentation>Key has not been successfully generated and cannot be used.</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
				</xs:restriction>
			</xs:simpleType>
			<!--===============================-->
			<xs:simpleType name="DotDecimalOID">
        <xs:annotation>
          <xs:documentation>An object identifier (OID) in dot-decimal form as specified in RFC4512.</xs:documentation>
        </xs:annotation>
				<xs:restriction base="xs:string">
					<xs:pattern value="[0-9]+(.[0-9]+)*"/>
				</xs:restriction>
			</xs:simpleType>
			<!--===============================-->
			<xs:simpleType name="DNAttributeType">
        <xs:annotation>
          <xs:documentation>The distinguished name attribute type encoded as specified in RFC 4514.</xs:documentation>
        </xs:annotation>
				<xs:restriction base="xs:string"/>
			</xs:simpleType>
			<!--===============================-->
      <xs:simpleType name="DNAttributeValue">
        <xs:restriction base="xs:string">
          <xs:annotation>
            <xs:documentation>
              The distinguished name attribute values are encoded in UTF-8 or in hexadecimal form as specified in RFC 4514.
            </xs:documentation>
          </xs:annotation>
        </xs:restriction>
      </xs:simpleType>
			<!--===============================-->
			<xs:complexType name="KeyAttribute">
				<xs:annotation>
					<xs:documentation>The attributes of a key in the keystore.</xs:documentation>
				</xs:annotation>
				<xs:sequence>
					<xs:element name="KeyID" type="tas:KeyID">
						<xs:annotation>
							<xs:documentation>The ID of the key.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Alias" type="xs:string" minOccurs="0">
						<xs:annotation>
							<xs:documentation>The client-defined alias of the key.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="hasPrivateKey" type="xs:boolean" minOccurs="0">
						<xs:annotation>
							<xs:documentation>Absent if the key is not a key pair. True if and only if the key is a key pair and contains a private key. False if and only if the key is a key pair and does not contain a private key.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="KeyStatus" type="xs:string">
						<xs:annotation>
							<xs:documentation>The status of the key. The value should be one of the values in the tas:KeyStatus enumeration.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
					<xs:element name="externallyGenerated" type="xs:boolean" minOccurs="0">
            <xs:annotation>
              <xs:documentation>(to be added)</xs:documentation>
            </xs:annotation>
          </xs:element>
					<xs:element name="securelyStored" type="xs:boolean" minOccurs="0">
            <xs:annotation>
              <xs:documentation>(to be added)</xs:documentation>
            </xs:annotation>
          </xs:element>
					<xs:element name="Extension" minOccurs="0">
						<xs:complexType>
							<xs:sequence>
								<xs:any namespace="##targetNamespace" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
							</xs:sequence>
						</xs:complexType>
					</xs:element>
				</xs:sequence>
				<xs:anyAttribute processContents="lax"/>
			</xs:complexType>
			<!--===============================-->
			<xs:complexType name="DNAttributeTypeAndValue">
				<xs:annotation>
					<xs:documentation>A distinguished name attribute type and value pair.</xs:documentation>
				</xs:annotation>
				<xs:sequence>
					<xs:element name="Type" type="tas:DNAttributeType">
						<xs:annotation>
							<xs:documentation>The attribute type.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Value" type="tas:DNAttributeValue">
						<xs:annotation>
							<xs:documentation>The value of the attribute.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:any minOccurs="0" maxOccurs="unbounded" namespace="##any" processContents="lax"/>
				</xs:sequence>
				<xs:anyAttribute processContents="lax"/>
			</xs:complexType>
      <!--===============================-->
      <xs:complexType name="MultiValuedRDN">
        <xs:annotation>
          <xs:documentation>A multi-valued RDN</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="Attribute" type="tas:DNAttributeTypeAndValue">
            <xs:annotation>
              <xs:documentation>A list of types and values defining a multi-valued RDN</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
			<!--===============================-->
			<xs:complexType name="DistinguishedName">
				<xs:sequence>
					<xs:element minOccurs="0" maxOccurs="unbounded" name="Country" type="tas:DNAttributeValue">
						<xs:annotation>
							<xs:documentation>A country name as specified in
								X.500.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element minOccurs="0" maxOccurs="unbounded" name="Organization" type="tas:DNAttributeValue">
						<xs:annotation>
							<xs:documentation>An organization name as specified in
								X.500.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element minOccurs="0" maxOccurs="unbounded" name="OrganizationalUnit" type="tas:DNAttributeValue">
						<xs:annotation>
							<xs:documentation>An organizational unit name as specified in
								X.500.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element minOccurs="0" maxOccurs="unbounded" name="DistinguishedNameQualifier" type="tas:DNAttributeValue">
						<xs:annotation>
							<xs:documentation>A distinguished name qualifier as specified in
								X.500.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element minOccurs="0" maxOccurs="unbounded" name="StateOrProvinceName" type="tas:DNAttributeValue">
						<xs:annotation>
							<xs:documentation>A state or province name as specified in
								X.500.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element minOccurs="0" maxOccurs="unbounded" name="CommonName" type="tas:DNAttributeValue">
						<xs:annotation>
							<xs:documentation>A common name as specified in
								X.500.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element minOccurs="0" maxOccurs="unbounded" name="SerialNumber" type="tas:DNAttributeValue">
						<xs:annotation>
							<xs:documentation>A serial number as specified in
								X.500.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element minOccurs="0" maxOccurs="unbounded" name="Locality" type="tas:DNAttributeValue">
						<xs:annotation>
							<xs:documentation>A locality as specified in X.500.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element minOccurs="0" maxOccurs="unbounded" name="Title" type="tas:DNAttributeValue">
						<xs:annotation>
							<xs:documentation>A title as specified in X.500.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element minOccurs="0" maxOccurs="unbounded" name="Surname" type="tas:DNAttributeValue">
						<xs:annotation>
							<xs:documentation>A surname as specified in X.500.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element minOccurs="0" maxOccurs="unbounded" name="GivenName" type="tas:DNAttributeValue">
						<xs:annotation>
							<xs:documentation>A given name as specified in X.500.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element minOccurs="0" maxOccurs="unbounded" name="Initials" type="tas:DNAttributeValue">
						<xs:annotation>
							<xs:documentation>Initials as specified in X.500.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element minOccurs="0" maxOccurs="unbounded" name="Pseudonym" type="tas:DNAttributeValue">
						<xs:annotation>
							<xs:documentation>A pseudonym as specified in X.500.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element minOccurs="0" maxOccurs="unbounded" name="GenerationQualifier" type="tas:DNAttributeValue">
						<xs:annotation>
							<xs:documentation>A generation qualifier as specified in
								X.500.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element minOccurs="0" maxOccurs="unbounded" name="GenericAttribute" type="tas:DNAttributeTypeAndValue">
						<xs:annotation>
							<xs:documentation>A generic type-value pair
								attribute.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element minOccurs="0" maxOccurs="unbounded" name="MultiValuedRDN" type="tas:MultiValuedRDN">
						<xs:annotation>
							<xs:documentation>A multi-valued RDN</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element minOccurs="0" name="anyAttribute">
						<xs:complexType>
							<xs:sequence>
								<xs:any minOccurs="0" maxOccurs="unbounded" namespace="##any" processContents="lax"/>
							</xs:sequence>
						</xs:complexType>
					</xs:element>
				</xs:sequence>
				<xs:anyAttribute processContents="lax"/>
			</xs:complexType>
			<!--===============================-->
			<xs:complexType name="AlgorithmIdentifier">
				<xs:annotation>
					<xs:documentation>An identifier of an algorithm.</xs:documentation>
				</xs:annotation>
				<xs:sequence>
					<xs:element name="algorithm" type="tas:DotDecimalOID">
						<xs:annotation>
							<xs:documentation>The OID of the algorithm in dot-decimal form.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element minOccurs="0" name="parameters" type="tas:Base64DERencodedASN1Value">
						<xs:annotation>
							<xs:documentation>Optional parameters of the algorithm (depending on the algorithm).</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element minOccurs="0" name="anyParameters">
						<xs:complexType>
							<xs:sequence>
								<xs:any minOccurs="0" maxOccurs="unbounded" namespace="##any" processContents="lax"/>
							</xs:sequence>
						</xs:complexType>
					</xs:element>
				</xs:sequence>
				<xs:anyAttribute processContents="lax"/>
			</xs:complexType>
      <!--===============================-->
      <xs:complexType name="BasicRequestAttribute">
        <xs:annotation>
          <xs:documentation>A CSR attribute as specified in RFC 2986.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element name="OID" type="tas:DotDecimalOID">
            <xs:annotation>
              <xs:documentation>The OID of the attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="value" type="tas:Base64DERencodedASN1Value">
            <xs:annotation>
              <xs:documentation>The value of the attribute as a base64-encoded DER representation of an ASN.1 value.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:any minOccurs="0" maxOccurs="unbounded" namespace="##any" processContents="lax"/>
        </xs:sequence>
        <xs:anyAttribute processContents="lax"/>
      </xs:complexType>
      <!--===============================-->
			<xs:complexType name="CSRAttribute">
				<xs:annotation>
					<xs:documentation>A CSR attribute as specified in PKCS#10.</xs:documentation>
				</xs:annotation>
				<xs:choice>
					<xs:element name="X509v3Extension" type="tas:X509v3Extension">
						<xs:annotation>
							<xs:documentation>An X.509v3 extension field.</xs:documentation>
						</xs:annotation>
					</xs:element>
          <xs:element name="BasicRequestAttribute" type="tas:BasicRequestAttribute">
            <xs:annotation>
              <xs:documentation>A basic CSR attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
					<xs:element minOccurs="0" name="anyAttribute">
						<xs:complexType>
							<xs:sequence>
								<xs:any minOccurs="0" maxOccurs="unbounded" namespace="##any" processContents="lax"/>
							</xs:sequence>
						</xs:complexType>
					</xs:element>
				</xs:choice>
				<xs:anyAttribute processContents="lax"/>
			</xs:complexType>
			<!--===============================-->
			<xs:simpleType name="Base64DERencodedASN1Value">
				<xs:annotation>
					<xs:documentation>A base64-encoded ASN.1 value.</xs:documentation>
				</xs:annotation>
				<xs:restriction base="xs:base64Binary"/>
			</xs:simpleType>
			<!--===============================-->
			<xs:complexType name="X509v3Extension">
				<xs:annotation>
					<xs:documentation>An X.509v3 extension field as specified in RFC 5280</xs:documentation>
				</xs:annotation>
				<xs:sequence>
					<xs:element name="extnOID" type="tas:DotDecimalOID">
						<xs:annotation>
							<xs:documentation>The OID of the extension field.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element default="false" name="critical" type="xs:boolean">
						<xs:annotation>
							<xs:documentation>True if and only if the extension is critical.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="extnValue" type="tas:Base64DERencodedASN1Value">
						<xs:annotation>
							<xs:documentation>The value of the extension field as a base64-encoded DER representation of an ASN.1 value.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:any minOccurs="0" maxOccurs="unbounded" namespace="##any" processContents="lax"/>
				</xs:sequence>
				<xs:anyAttribute processContents="lax"/>
			</xs:complexType>
			<!--===============================-->
			<xs:complexType name="X509Certificate">
				<xs:annotation>
					<xs:documentation>An X.509 cerficiate as specified in RFC 5280.</xs:documentation>
				</xs:annotation>
				<xs:sequence>
					<xs:element name="CertificateID" type="tas:CertificateID">
						<xs:annotation>
							<xs:documentation>The ID of the certificate.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="KeyID" type="tas:KeyID">
						<xs:annotation>
							<xs:documentation>The ID of the key that this certificate associates to the certificate subject.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Alias" type="xs:string" minOccurs="0">
						<xs:annotation>
							<xs:documentation>The client-defined alias of the certificate.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="CertificateContent" type="tas:Base64DERencodedASN1Value">
						<xs:annotation>
							<xs:documentation>The base64-encoded DER representation of the X.509 certificate.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:any minOccurs="0" maxOccurs="unbounded" namespace="##any" processContents="lax"/>
				</xs:sequence>
				<xs:anyAttribute processContents="lax"/>
			</xs:complexType>
			<!--===============================-->
			<xs:complexType name="CertificateIDs">
				<xs:annotation>
					<xs:documentation>A sequence of certificate IDs.</xs:documentation>
				</xs:annotation>
				<xs:sequence>
					<xs:element maxOccurs="unbounded" name="CertificateID" type="tas:CertificateID">
						<xs:annotation>
							<xs:documentation>A certificate ID.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:anyAttribute processContents="lax"/>
			</xs:complexType>
			<!--===============================-->
			<xs:complexType name="CertificationPath">
				<xs:annotation>
					<xs:documentation>An X.509 certification path as defined in RFC 5280.</xs:documentation>
				</xs:annotation>
				<xs:sequence>
					<xs:element maxOccurs="unbounded" name="CertificateID" type="tas:CertificateID">
						<xs:annotation>
							<xs:documentation>A certificate in the certification path.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Alias" type="xs:string" minOccurs="0">
						<xs:annotation>
							<xs:documentation>The client-defined alias of the certification path.</xs:documentation>
						</xs:annotation>
					</xs:element>
          <xs:element minOccurs="0" name="anyElement">
            <xs:complexType>
              <xs:sequence>
                <xs:any namespace="##any" minOccurs="0" maxOccurs="unbounded"  processContents="lax"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
				</xs:sequence>
				<xs:anyAttribute processContents="lax"/>
			</xs:complexType>
      <!--===============================-->
      <xs:complexType name="PassphraseAttribute">
        <xs:sequence>
          <xs:element name="PassphraseID" type="tas:PassphraseID">
            <xs:annotation>
              <xs:documentation>The ID of the passphrase.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="Alias" type="xs:string" minOccurs="0">
            <xs:annotation>
              <xs:documentation>The alias of the passphrase.</xs:documentation>
            </xs:annotation>
          </xs:element>
					<xs:element minOccurs="0" name="Extension">
            <xs:complexType>
              <xs:sequence>
                <xs:any maxOccurs="unbounded" namespace="##any" processContents="lax"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
        <xs:anyAttribute processContents="lax"/>
      </xs:complexType>
			<!--===============================-->
			<xs:simpleType name="Dot1XMethod">
				<xs:annotation>
					<xs:documentation>The definition of an 802.1X authentication method listed from outer to inner, such as "EAP-PEAP MSCHAPv2" or "EAP-MD5".</xs:documentation>
				</xs:annotation>
				<xs:list itemType="xs:string"/>
			</xs:simpleType>
			<!--===============================-->
			<xs:complexType name="Dot1XCapabilities">
				<xs:annotation>
					<xs:documentation>The capabilities of the 802.1X implementation on a device.</xs:documentation>
				</xs:annotation>
				<xs:sequence>
					<xs:element name="Dot1XMethods" type="tas:Dot1XMethod" minOccurs="0" maxOccurs="unbounded">
						<xs:annotation>
							<xs:documentation>The authentication methods supported by the 802.1X implementation.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Extension" type="tas:Dot1XCapabilitiesExtension" minOccurs="0"/>
				</xs:sequence>
				<xs:attribute name="MaximumNumberOfDot1XConfigurations" type="xs:positiveInteger">
					<xs:annotation>
						<xs:documentation>The maximum number of 802.1X configurations that may be defined simultaneously.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:complexType>
			<xs:complexType name="Dot1XCapabilitiesExtension">
				<xs:sequence>
					<xs:any namespace="##any" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:complexType>
			<!--===============================-->
			<xs:complexType name="Dot1XStage">
				<xs:annotation>
					<xs:documentation>The configuration parameters required for a particular authentication method.</xs:documentation>
				</xs:annotation>
				<xs:sequence>
					<xs:element name="Identity" type="xs:string" minOccurs="0">
						<xs:annotation>
							<xs:documentation>The identity used in this authentication method, if required.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="AnonymousID" type="xs:string" minOccurs="0">
						<xs:annotation>
							<xs:documentation>The anonymous ID used in this authentication method, if required.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="CertificationPathID" type="tas:CertificationPathID" minOccurs="0">
						<xs:annotation>
							<xs:documentation>The unique identifier of the certification path used in this authentication method, if required.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="PassphraseID" type="tas:PassphraseID" minOccurs="0">
						<xs:annotation>
							<xs:documentation>The identifier for the password used in this authentication method, if required.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Inner" type="tas:Dot1XStage" minOccurs="0">
						<xs:annotation>
							<xs:documentation>The configuration of the next stage of authentication, if required.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Extension" type="tas:Dot1XStageExtension" minOccurs="0"/>
				</xs:sequence>
				<xs:attribute name="Method" type="xs:string" use="required">
					<xs:annotation>
						<xs:documentation>The authentication method for this stage (e.g., "EAP-PEAP").</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:anyAttribute processContents="lax"/>
			</xs:complexType>
			<xs:complexType name="Dot1XStageExtension">
				<xs:sequence>
					<xs:any namespace="##any" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:complexType>
			<!--===============================-->
			<xs:complexType name="Dot1XConfiguration">
				<xs:sequence>
					<xs:element name="Outer" type="tas:Dot1XStage">
						<xs:annotation>
							<xs:documentation>The outer level authentication method used in this 802.1X configuration.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:any namespace="##any" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
				</xs:sequence>
				<xs:anyAttribute processContents="lax"/>
			</xs:complexType>
			<!--===============================-->
			<xs:complexType name="Dot1XSummary">
				<xs:sequence>
					<xs:element name="Dot1XID" type="tas:Dot1XID">
						<xs:annotation>
							<xs:documentation>The unique identifier of an existing 802.1X configuration.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Alias" type="xs:string">
						<xs:annotation>
							<xs:documentation>The client-defined alias associated with this unique identifier.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:complexType>
      <!--==========================================-->
      <!-- Begin Cert-based client auth data types  -->
      <!--==========================================-->
      <xs:simpleType name="CRLID">
        <xs:restriction base="xs:ID" />
      </xs:simpleType>
      <xs:simpleType name="CertPathValidationPolicyID">
        <xs:restriction base="xs:ID" />
      </xs:simpleType>
      <xs:complexType name="CRL">
        <xs:sequence>
          <xs:element name="CRLID" type="tas:CRLID">
          </xs:element>
          <xs:element name="Alias" type="xs:string">
          </xs:element>
          <xs:element name="CRLContent" type="tas:Base64DERencodedASN1Value">
          </xs:element>
          <xs:any minOccurs="0" maxOccurs="unbounded" namespace="##any" processContents="lax"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CertPathValidationParameters">
        <xs:sequence>
          <xs:element name="RequireTLSWWWClientAuthExtendedKeyUsage" type="xs:boolean" minOccurs="0" default="false">
            <xs:annotation>
              <xs:documentation>True if and only if the TLS server shall not authenticate client certificates that do not contain the TLS WWW client authentication key usage extension as specified in RFC 5280, Sect. 4.2.1.12.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="UseDeltaCRLs" type="xs:boolean" minOccurs="0" default="false">
            <xs:annotation>
              <xs:documentation>True if and only if delta CRLs, if available, shall be applied to CRLs.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="anyParameters">
            <xs:complexType>
              <xs:sequence>
                <xs:any minOccurs="0" maxOccurs="unbounded" namespace="##any" processContents="lax"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="TrustAnchor">
        <xs:sequence>
          <xs:element name="CertificateID" type="tas:CertificateID">
            <xs:annotation>
              <xs:documentation>The certificate ID of the certificate to be used as trust anchor.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:any minOccurs="0" maxOccurs="unbounded" namespace="##any" processContents="lax"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CertPathValidationPolicy">
        <xs:sequence>
          <xs:element name="CertPathValidationPolicyID" type="tas:CertPathValidationPolicyID">
          </xs:element>
          <xs:element name="Alias" type="xs:string" minOccurs="0">
          </xs:element>
          <xs:element name="Parameters" type="tas:CertPathValidationParameters">
          </xs:element>
          <xs:element name="TrustAnchor" type="tas:TrustAnchor" maxOccurs="unbounded"></xs:element>
          <xs:element minOccurs="0" name="anyParameters">
            <xs:complexType>
              <xs:sequence>
                <xs:any minOccurs="0" maxOccurs="unbounded" namespace="##any" processContents="lax"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <!--========================================-->
      <!-- End Cert-based client auth data types-->
      <!--========================================-->

      <!--===============================-->
			<xs:simpleType name="RSAKeyLengths">
				<xs:annotation>
					<xs:documentation>A list of RSA key lenghts in bits.</xs:documentation>
				</xs:annotation>
				<xs:list itemType="xs:nonNegativeInteger"/>
			</xs:simpleType>
			<xs:simpleType name="X509Versions">
				<xs:annotation>
					<xs:documentation>A list of X.509 versions.</xs:documentation>
				</xs:annotation>
				<xs:list itemType="xs:int"/>
			</xs:simpleType>
			<xs:simpleType name="TLSVersions">
				<xs:annotation>
					<xs:documentation>A list of TLS versions.</xs:documentation>
				</xs:annotation>
				<xs:list itemType="xs:string"/>
			</xs:simpleType>
      <xs:simpleType name="PasswordBasedEncryptionAlgorithms">
        <xs:annotation>
          <xs:documentation>A list of password based encryption algorithms.</xs:documentation>
        </xs:annotation>
        <xs:list itemType="xs:string"/>
      </xs:simpleType>
      <xs:simpleType name="PasswordBasedMACAlgorithms">
        <xs:annotation>
          <xs:documentation>A list of password based MAC algorithms.</xs:documentation>
        </xs:annotation>
        <xs:list itemType="xs:string"/>
      </xs:simpleType>
      <!--===============================-->
			<xs:complexType name="KeystoreCapabilities">
				<xs:annotation>
					<xs:documentation>The capabilities of a keystore implementation on a device.</xs:documentation>
				</xs:annotation>
				<xs:sequence>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="SignatureAlgorithms" type="tas:AlgorithmIdentifier">
            <xs:annotation>
              <xs:documentation>The signature algorithms supported by the keystore implementation.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="anyElement">
            <xs:complexType>
              <xs:sequence>
                <xs:any namespace="##any" minOccurs="0" maxOccurs="unbounded"  processContents="lax"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
				<xs:attribute name="MaximumNumberOfKeys" type="xs:positiveInteger">
					<xs:annotation>
						<xs:documentation>Indicates the maximum number of keys that the device can store simultaneously.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="MaximumNumberOfCertificates" type="xs:positiveInteger">
					<xs:annotation>
						<xs:documentation>Indicates the maximum number of certificates that the device can store simultaneously.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="MaximumNumberOfCertificationPaths" type="xs:positiveInteger">
					<xs:annotation>
						<xs:documentation>Indicates the maximum number of certification paths that the device can store simultaneously.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="RSAKeyPairGeneration" type="xs:boolean">
					<xs:annotation>
						<xs:documentation>Indication that the device supports on-board RSA key pair generation.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="RSAKeyLengths" type="tas:RSAKeyLengths">
					<xs:annotation>
						<xs:documentation>Indicates which RSA key lengths are supported by the device.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="PKCS10ExternalCertificationWithRSA" type="xs:boolean">
					<xs:annotation>
						<xs:documentation>Indicates support for creating PKCS#10 requests for RSA keys and uploading the certificate obtained from a CA..</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="SelfSignedCertificateCreationWithRSA" type="xs:boolean">
					<xs:annotation>
						<xs:documentation>Indicates support for creating self-signed certificates for RSA keys.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="X509Versions" type="tas:X509Versions">
					<xs:annotation>
						<xs:documentation>Indicates which X.509 versions are supported by the device.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="MaximumNumberOfPassphrases" type="xs:nonNegativeInteger">
          <xs:annotation>
						<xs:documentation>Indicates the maximum number of passphrases that the device is able to store simultaneously.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="PKCS8RSAKeyPairUpload" type="xs:boolean">
          <xs:annotation>
						<xs:documentation>Indicates support for uploading an RSA key pair in a PKCS#8 data structure.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="PKCS12CertificateWithRSAPrivateKeyUpload" type="xs:boolean">
          <xs:annotation>
						<xs:documentation>Indicates support for uploading a certificate along with an RSA private key in a PKCS#12 data structure.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="PasswordBasedEncryptionAlgorithms" type="tas:PasswordBasedEncryptionAlgorithms">
          <xs:annotation>
						<xs:documentation>Indicates which password-based encryption algorithms are supported by the device.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="PasswordBasedMACAlgorithms" type="tas:PasswordBasedEncryptionAlgorithms">
          <xs:annotation>
						<xs:documentation>Indicates which password-based MAC algorithms are supported by the device.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
        <!-- ========================================= -->
        <!-- Begin cert-based client auth capabilities -->
        <!-- ========================================= -->
        <xs:attribute name="MaximumNumberOfCRLs" type="xs:nonNegativeInteger">
          <xs:annotation>
            <xs:documentation>Indicates the maximum number of CRLs that the device is able to store simultaneously.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="MaximumNumberOfCertificationPathValidationPolicies" type="xs:nonNegativeInteger">
          <xs:annotation>
            <xs:documentation>Indicates the maximum number of certification path validation policies that the device is able to store simultaneously.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="EnforceTLSWebClientAuthExtKeyUsage" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether a device supports checking for the TLS WWW client auth extended key usage extension while validating certification paths.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <!-- ========================================= -->
        <!-- End cert-based client auth capabilities   -->
        <!-- ========================================= -->
				<xs:anyAttribute processContents="lax"/>
			</xs:complexType>
			<!--===============================-->
			<xs:complexType name="TLSServerCapabilities">
				<xs:annotation>
					<xs:documentation>The capabilities of a TLS server implementation on a device.</xs:documentation>
				</xs:annotation>
				<xs:sequence>
					<xs:any namespace="##any" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
				</xs:sequence>
				<xs:attribute name="TLSServerSupported" type="tas:TLSVersions">
					<xs:annotation>
						<xs:documentation>Indicates which TLS versions are supported by the device.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="MaximumNumberOfTLSCertificationPaths" type="xs:positiveInteger">
					<xs:annotation>
						<xs:documentation>Indicates the maximum number of certification paths that may be assigned to the TLS server simultaneously.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
        <!-- ========================================= -->
        <!-- Begin cert-based client auth capabilities -->
        <!-- ========================================= -->
        <xs:attribute name="TLSClientAuthSupported" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Indicates whether the device supports TLS client authentication.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="MaximumNumberOfTLSCertificationPathValidationPolicies" type="xs:nonNegativeInteger">
          <xs:annotation>
            <xs:documentation>Indicates the maximum number of certification path validation policies that may be assigned to the TLS server simultaneously.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <!-- ========================================= -->
        <!-- End cert-based client auth capabilities   -->
        <!-- ========================================= -->
				<xs:anyAttribute processContents="lax"/>
			</xs:complexType>
			<!--===============================-->
			<xs:complexType name="Capabilities">
        <xs:annotation>
          <xs:documentation>The capabilities of an Advanced Security Service implementation on a device.</xs:documentation>
        </xs:annotation>
				<xs:sequence>
					<xs:element name="KeystoreCapabilities" type="tas:KeystoreCapabilities">
						<xs:annotation>
							<xs:documentation>The capabilities of the keystore implementation.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="TLSServerCapabilities" type="tas:TLSServerCapabilities">
						<xs:annotation>
							<xs:documentation>The capabilities of the TLS server implementation.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
					<xs:element name="Dot1XCapabilities" type="tas:Dot1XCapabilities" minOccurs="0">
						<xs:annotation>
							<xs:documentation>The capabilities of the 802.1X implementation.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Extension" type="tas:CapabilitiesExtension" minOccurs="0"/>
				</xs:sequence>
				<xs:anyAttribute processContents="lax"/>
			</xs:complexType>
			<xs:element name="Capabilities" type="tas:Capabilities"/>
			<!--===============================-->
			<xs:complexType name="CapabilitiesExtension">
				<xs:sequence>
					<xs:any namespace="##targetNamespace" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:complexType>
			<!--=========================================-->
			<!-- Request/response elements               -->
			<!--=========================================-->
			<xs:element name="GetServiceCapabilities">
				<xs:complexType>
					<xs:sequence/>
				</xs:complexType>
			</xs:element>
			<xs:element name="GetServiceCapabilitiesResponse">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="Capabilities" type="tas:Capabilities">
							<xs:annotation>
								<xs:documentation>The capabilities for the advanced secuirty service is returned in the Capabilities element.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<!--===============================-->
			<xs:element name="CreateRSAKeyPair">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="KeyLength" type="xs:nonNegativeInteger">
							<xs:annotation>
								<xs:documentation>The length of the key to be created.</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="Alias" type="xs:string" minOccurs="0">
							<xs:annotation>
								<xs:documentation>The client-defined alias of the key.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="CreateRSAKeyPairResponse">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="KeyID" type="tas:KeyID">
							<xs:annotation>
								<xs:documentation>The key ID of the key pair being generated.</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="EstimatedCreationTime" type="xs:duration">
							<xs:annotation>
								<xs:documentation>Best-effort estimate of how long the key generation will take.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
      <!--===============================-->
      <xs:element name="UploadKeyPairInPKCS8">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="KeyPair" type="tas:Base64DERencodedASN1Value">
              <xs:annotation>
                <xs:documentation>The key pair to be uploaded in a PKCS#8 data structure.</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="Alias" type="xs:string" minOccurs="0">
              <xs:annotation>
                <xs:documentation>The client-defined alias of the key pair.</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="EncryptionPassphraseID" type="tas:PassphraseID" minOccurs="0">
              <xs:annotation>
								<xs:documentation>The ID of the passphrase to use for decrypting the uploaded key pair.</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="UploadKeyPairInPKCS8Response">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="KeyID" type="tas:KeyID">
              <xs:annotation>
								<xs:documentation>The key ID of the uploaded key pair.</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <!--===============================-->
      <xs:element name="UploadCertificateWithPrivateKeyInPKCS12">
        <xs:complexType>
          <xs:sequence>
						<xs:element name="CertWithPrivateKey" type="tas:Base64DERencodedASN1Value">
              <xs:annotation>
                <xs:documentation>The certificates and key pair to be uploaded in a PKCS#12 data structure.</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="CertificationPathAlias" type="xs:string" minOccurs="0">
              <xs:annotation>
                <xs:documentation>The client-defined alias of the certification path.</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="KeyAlias" type="xs:string" minOccurs="0">
              <xs:annotation>
                <xs:documentation>The client-defined alias of the key pair.</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="IgnoreAdditionalCertificates" type="xs:boolean" minOccurs="0" default="false">
              <xs:annotation>
                <xs:documentation>True if and only if the device shall behave as if the client had only supplied the first certificate in the sequence of certificates.</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="IntegrityPassphraseID" type="tas:PassphraseID" minOccurs="0">
              <xs:annotation>
                <xs:documentation>The ID of the passphrase to use for integrity checking.</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="EncryptionPassphraseID" type="tas:PassphraseID" minOccurs="0">
              <xs:annotation>
                <xs:documentation>The ID of the passphrase to use for decryption.</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="UploadCertificateWithPrivateKeyInPKCS12Response">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="CertificationPathID" type="tas:CertificationPathID">
              <xs:annotation>
                <xs:documentation>The key ID of the created certification path.</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="KeyID" type="tas:KeyID">
              <xs:annotation>
                <xs:documentation>The key ID of the key pair that contains the uploaded private key.</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
			<!--===============================-->
			<xs:element name="GetKeyStatus">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="KeyID" type="tas:KeyID">
							<xs:annotation>
								<xs:documentation>The ID of the key for which to return the status.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="GetKeyStatusResponse">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="KeyStatus" type="xs:string">
							<xs:annotation>
								<xs:documentation>Status of the requested key. The value should be one of the values in the tas:KeyStatus enumeration.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<!--===============================-->
			<xs:element name="GetPrivateKeyStatus">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="KeyID" type="tas:KeyID">
							<xs:annotation>
								<xs:documentation>The ID of the key pair for which to return whether it contains a private key.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="GetPrivateKeyStatusResponse">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="hasPrivateKey" type="xs:boolean">
							<xs:annotation>
								<xs:documentation>True if and only if the key pair contains a private key.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<!--===============================-->
			<xs:element name="GetAllKeys">
				<xs:complexType>
					<xs:sequence/>
				</xs:complexType>
			</xs:element>
			<xs:element name="GetAllKeysResponse">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="KeyAttribute" type="tas:KeyAttribute" minOccurs="0" maxOccurs="unbounded">
							<xs:annotation>
								<xs:documentation>Information about a key in the keystore.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<!--===============================-->
			<xs:element name="DeleteKey">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="KeyID" type="tas:KeyID">
							<xs:annotation>
								<xs:documentation>The ID of the key that is to be deleted from the keystore.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="DeleteKeyResponse">
				<xs:complexType>
					<xs:sequence/>
				</xs:complexType>
			</xs:element>
			<!--===============================-->
			<xs:element name="CreatePKCS10CSR">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="Subject" type="tas:DistinguishedName">
							<xs:annotation>
								<xs:documentation>The subject to be included in the CSR.</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="KeyID" type="tas:KeyID">
							<xs:annotation>
								<xs:documentation>The ID of the key for which the CSR shall be created.</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="CSRAttribute" minOccurs="0" maxOccurs="unbounded" type="tas:CSRAttribute">
							<xs:annotation>
								<xs:documentation>An attribute to be included in the CSR.</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="SignatureAlgorithm" type="tas:AlgorithmIdentifier">
							<xs:annotation>
								<xs:documentation>The signature algorithm to be used to sign the CSR. Defaults to SHA1 with RSA Encryption.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="CreatePKCS10CSRResponse">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="PKCS10CSR" type="tas:Base64DERencodedASN1Value">
							<xs:annotation>
								<xs:documentation>The DER encoded PKCS#10 certification request.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<!--===============================-->
			<xs:element name="CreateSelfSignedCertificate">
				<xs:complexType>
					<xs:sequence>
						<xs:element minOccurs="0" name="X509Version" type="xs:positiveInteger">
							<xs:annotation>
								<xs:documentation>The X.509 version that the generated certificate shall comply to.</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="Subject" type="tas:DistinguishedName">
							<xs:annotation>
								<xs:documentation>Distinguished name of the entity that the certificate shall belong to.</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="KeyID" type="tas:KeyID">
							<xs:annotation>
								<xs:documentation>The ID of the key for which the certificate shall be created.</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="Alias" type="xs:string" minOccurs="0">
							<xs:annotation>
								<xs:documentation>The client-defined alias of the certificate to be created.</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element minOccurs="0" name="notValidBefore" type="xs:dateTime">
							<xs:annotation>
								<xs:documentation>The X.509 not valid before information to be included in the certificate. Defaults to the device's current time or a time before the device's current time.</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element minOccurs="0" name="notValidAfter" type="xs:dateTime">
							<xs:annotation>
								<xs:documentation>The X.509 not valid after information to be included in the certificate. Defaults to the time 99991231235959Z as specified in RFC 5280.</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="SignatureAlgorithm" type="tas:AlgorithmIdentifier">
							<xs:annotation>
								<xs:documentation>The signature algorithm to be used for signing the certificate. Defaults to SHA1 with RSA Encryption.</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element minOccurs="0" maxOccurs="unbounded" name="Extension" type="tas:X509v3Extension">
							<xs:annotation>
								<xs:documentation>An X.509v3 extension to be included in the certificate.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="CreateSelfSignedCertificateResponse">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CertificateID" type="tas:CertificateID">
							<xs:annotation>
								<xs:documentation>The ID of the generated certificate.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<!--===============================-->
			<xs:element name="UploadCertificate">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="Certificate" type="tas:Base64DERencodedASN1Value">
							<xs:annotation>
								<xs:documentation>The base64-encoded DER representation of the X.509 certificate to be uploaded.</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="Alias" type="xs:string" minOccurs="0">
							<xs:annotation>
								<xs:documentation>The client-defined alias of the certificate.</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="KeyAlias" type="xs:string" minOccurs="0">
							<xs:annotation>
								<xs:documentation>The client-defined alias of the key pair.</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="PrivateKeyRequired" type="xs:boolean" minOccurs="0" default="false">
							<xs:annotation>
								<xs:documentation>Indicates if the device shall verify that a matching key pair with a private key exists in the keystore.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="UploadCertificateResponse">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CertificateID" type="tas:CertificateID">
							<xs:annotation>
								<xs:documentation>The ID of the uploaded certificate.</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="KeyID" type="tas:KeyID">
							<xs:annotation>
								<xs:documentation>The ID of the key that the uploaded certificate certifies.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<!--===============================-->
			<xs:element name="GetCertificate">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CertificateID" type="tas:CertificateID">
							<xs:annotation>
								<xs:documentation>The ID of the certificate to retrieve.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="GetCertificateResponse">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="Certificate" type="tas:X509Certificate">
							<xs:annotation>
								<xs:documentation>The DER representation of the certificate.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<!--===============================-->
			<xs:element name="GetAllCertificates">
				<xs:complexType>
					<xs:sequence/>
				</xs:complexType>
			</xs:element>
			<xs:element name="GetAllCertificatesResponse">
				<xs:complexType>
					<xs:annotation>
						<xs:documentation>A list with all certificates stored in the keystore.</xs:documentation>
					</xs:annotation>
					<xs:sequence>
						<xs:element minOccurs="0" maxOccurs="unbounded" name="Certificate" type="tas:X509Certificate">
							<xs:annotation>
								<xs:documentation>A certificate stored in the keystore.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<!--===============================-->
			<xs:element name="DeleteCertificate">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CertificateID" type="tas:CertificateID">
							<xs:annotation>
								<xs:documentation>The ID of the certificate to delete.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="DeleteCertificateResponse">
				<xs:complexType>
					<xs:sequence/>
				</xs:complexType>
			</xs:element>
			<!--===============================-->
			<xs:element name="CreateCertificationPath">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CertificateIDs" type="tas:CertificateIDs">
							<xs:annotation>
								<xs:documentation>The IDs of the certificates to include in the certification path, where each certificate signature except for the last one in the path must be verifiable with the public key certified by the next certificate in the path.</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="Alias" type="xs:string" minOccurs="0">
							<xs:annotation>
								<xs:documentation>The client-defined alias of the certification path.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="CreateCertificationPathResponse">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CertificationPathID" type="tas:CertificationPathID">
							<xs:annotation>
								<xs:documentation>The ID of the generated certification path.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<!--===============================-->
			<xs:element name="GetCertificationPath">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CertificationPathID" type="tas:CertificationPathID">
							<xs:annotation>
								<xs:documentation>The ID of the certification path to retrieve.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="GetCertificationPathResponse">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CertificationPath" type="tas:CertificationPath">
							<xs:annotation>
								<xs:documentation>The certification path that is stored under the given ID in the keystore.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<!--===============================-->
			<xs:element name="GetAllCertificationPaths">
				<xs:complexType>
					<xs:sequence/>
				</xs:complexType>
			</xs:element>
			<xs:element name="GetAllCertificationPathsResponse">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CertificationPathID" type="tas:CertificationPathID" minOccurs="0" maxOccurs="unbounded">
							<xs:annotation>
								<xs:documentation>An ID of a certification path in the keystore.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<!--===============================-->
			<xs:element name="DeleteCertificationPath">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CertificationPathID" type="tas:CertificationPathID">
							<xs:annotation>
								<xs:documentation>The ID of the certification path to delete.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="DeleteCertificationPathResponse">
				<xs:complexType>
					<xs:sequence/>
				</xs:complexType>
			</xs:element>
      <!--===============================-->
      <xs:element name="UploadPassphrase">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="Passphrase" type="xs:string">
              <xs:annotation>
                <xs:documentation>The passphrase to upload.</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="PassphraseAlias" type="xs:string" minOccurs="0">
              <xs:annotation>
                <xs:documentation>The alias for the passphrase to upload.</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="UploadPassphraseResponse">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="PassphraseID" type="tas:PassphraseID">
              <xs:annotation>
                <xs:documentation>The PassphraseID of the uploaded passphrase.</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <!--===============================-->
      <xs:element name="GetAllPassphrases">
        <xs:complexType>
          <xs:sequence/>
        </xs:complexType>
      </xs:element>
      <xs:element name="GetAllPassphrasesResponse">
        <xs:complexType>
          <xs:sequence>
            <xs:annotation>
              <xs:documentation>A list with information about all passphrases in the keystore.</xs:documentation>
            </xs:annotation>
            <xs:element name="PassphraseAttribute" type="tas:PassphraseAttribute" minOccurs="0" maxOccurs="unbounded">
              <xs:annotation>
                <xs:documentation>Information about a passphrase in the keystore.</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <!--===============================-->
      <xs:element name="DeletePassphrase">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="PassphraseID" type="tas:PassphraseID">
              <xs:annotation>
                <xs:documentation>The ID of the passphrase that is to be deleted from the keystore.</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="DeletePassphraseResponse">
        <xs:complexType>
          <xs:sequence/>
        </xs:complexType>
      </xs:element>
      <!--===============================-->
      <xs:element name="AddServerCertificateAssignment">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="CertificationPathID" type="tas:CertificationPathID"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="AddServerCertificateAssignmentResponse">
        <xs:complexType>
          <xs:sequence/>
        </xs:complexType>
      </xs:element>
			<!--===============================-->
			<xs:element name="RemoveServerCertificateAssignment">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CertificationPathID" type="tas:CertificationPathID"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="RemoveServerCertificateAssignmentResponse">
				<xs:complexType>
					<xs:sequence/>
				</xs:complexType>
			</xs:element>
			<!--===============================-->
			<xs:element name="ReplaceServerCertificateAssignment">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="OldCertificationPathID" type="tas:CertificationPathID"/>
						<xs:element name="NewCertificationPathID" type="tas:CertificationPathID"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="ReplaceServerCertificateAssignmentResponse">
				<xs:complexType>
					<xs:sequence/>
				</xs:complexType>
			</xs:element>
			<!--===============================-->
			<xs:element name="GetAssignedServerCertificates">
				<xs:complexType>
					<xs:sequence/>
				</xs:complexType>
			</xs:element>
			<xs:element name="GetAssignedServerCertificatesResponse">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CertificationPathID" type="tas:CertificationPathID" minOccurs="0" maxOccurs="unbounded">
							<xs:annotation>
								<xs:documentation>The IDs of all certification paths that are assigned to the TLS server on the device.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
      <!--===============================================-->
      <!-- Begin Cert-based client auth message types    -->
      <!--===============================================-->
      <xs:element name="UploadCRL">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="Crl" type="tas:Base64DERencodedASN1Value">
              <xs:annotation>
                <xs:documentation>
                  tbd
                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="Alias" type="xs:string" minOccurs="0">
              <xs:annotation>
                <xs:documentation>
                  tbd
                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="anyParameters">
              <xs:complexType>
                <xs:sequence>
                  <xs:any minOccurs="0" maxOccurs="unbounded" namespace="##any" processContents="lax"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="UploadCRLResponse">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="CrlID" type="tas:CRLID">
              <xs:annotation>
                <xs:documentation>
                  tbd
                </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <!--===============================-->
      <xs:element name="GetCRL">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="CrlID" type="tas:CRLID">
              <xs:annotation>
                <xs:documentation>
                  tbd
                </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="GetCRLResponse">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="Crl" type="tas:CRL">
              <xs:annotation>
                <xs:documentation>
                  tbd
                </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <!--===============================-->
      <xs:element name="GetAllCRLs">
        <xs:complexType>
          <xs:sequence/>
        </xs:complexType>
      </xs:element>
      <xs:element name="GetAllCRLsResponse">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="Crl" type="tas:CRL" minOccurs="0" maxOccurs="unbounded">
              <xs:annotation>
                <xs:documentation>
                  tbd
                </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <!--===============================-->
      <xs:element name="DeleteCRL">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="CrlID" type="tas:CRLID">
              <xs:annotation>
                <xs:documentation>
                  tbd
                </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="DeleteCRLResponse">
        <xs:complexType>
          <xs:sequence />
        </xs:complexType>
      </xs:element>
      <!--===============================-->
      <xs:element name="CreateCertPathValidationPolicy">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="Alias" type="xs:string" minOccurs="0">
              <xs:annotation>
                <xs:documentation>
                  tbd
                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="Parameters" type="tas:CertPathValidationParameters">
              <xs:annotation>
                <xs:documentation>
                  tbd
                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="TrustAnchor" type="tas:TrustAnchor" maxOccurs="unbounded">
              <xs:annotation>
                <xs:documentation>
                  tbd
                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="anyParameters">
              <xs:complexType>
                <xs:sequence>
                  <xs:any minOccurs="0" maxOccurs="unbounded" namespace="##any" processContents="lax"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="CreateCertPathValidationPolicyResponse">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="CertPathValidationPolicyID" type="tas:CertPathValidationPolicyID">
              <xs:annotation>
                <xs:documentation>
                  tbd
                </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <!--===============================-->
      <xs:element name="GetCertPathValidationPolicy">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="CertPathValidationPolicyID" type="tas:CertPathValidationPolicyID">
              <xs:annotation>
                <xs:documentation>
                  tbd
                </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="GetCertPathValidationPolicyResponse">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="CertPathValidationPolicy" type="tas:CertPathValidationPolicy">
              <xs:annotation>
                <xs:documentation>
                  tbd
                </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <!--===============================-->
      <xs:element name="GetAllCertPathValidationPolicies">
        <xs:complexType>
          <xs:sequence />
        </xs:complexType>
      </xs:element>
      <xs:element name="GetAllCertPathValidationPoliciesResponse">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="CertPathValidationPolicy" type="tas:CertPathValidationPolicy" minOccurs="0" maxOccurs="unbounded">
              <xs:annotation>
                <xs:documentation>
                  tbd
                </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <!--===============================-->
      <xs:element name="DeleteCertPathValidationPolicy">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="CertPathValidationPolicyID" type="tas:CertPathValidationPolicyID">
              <xs:annotation>
                <xs:documentation>
                  tbd
                </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="DeleteCertPathValidationPolicyResponse">
        <xs:complexType>
          <xs:sequence />
        </xs:complexType>
      </xs:element>
      <!--===============================-->
      <xs:element name="DeleteUnreferencedCertPathValidationPolicies">
        <xs:complexType>
          <xs:sequence />
        </xs:complexType>
      </xs:element>
      <xs:element name="DeleteUnreferencedCertPathValidationPoliciesResponse">
        <xs:complexType>
          <xs:sequence />
        </xs:complexType>
      </xs:element>
      <!--===============================-->
      <xs:element name="SetClientAuthenticationRequired">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="clientAuthenticationRequired" type="xs:boolean">
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="SetClientAuthenticationRequiredResponse">
        <xs:complexType>
          <xs:sequence />
        </xs:complexType>
      </xs:element>
      <!--===============================-->
      <xs:element name="GetClientAuthenticationRequired">
        <xs:complexType>
          <xs:sequence />
        </xs:complexType>
      </xs:element>
      <xs:element name="GetClientAuthenticationRequiredResponse">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="clientAuthenticationRequired" type="xs:boolean">
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <!--===============================-->
      <xs:element name="AddCertPathValidationPolicyAssignment">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="CertPathValidationPolicyID" type="tas:CertPathValidationPolicyID">
              <xs:annotation>
                <xs:documentation>
                  tbd
                </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="AddCertPathValidationPolicyAssignmentResponse">
        <xs:complexType>
          <xs:sequence />
        </xs:complexType>
      </xs:element>
      <!--===============================-->
      <xs:element name="RemoveCertPathValidationPolicyAssignment">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="CertPathValidationPolicyID" type="tas:CertPathValidationPolicyID">
              <xs:annotation>
                <xs:documentation>
                  tbd
                </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="RemoveCertPathValidationPolicyAssignmentResponse">
        <xs:complexType>
          <xs:sequence />
        </xs:complexType>
      </xs:element>
      <!--===============================-->
      <xs:element name="ReplaceCertPathValidationPolicyAssignment">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="OldCertPathValidationPolicyID" type="tas:CertPathValidationPolicyID">
              <xs:annotation>
                <xs:documentation>
                  tbd
                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="NewCertPathValidationPolicyID" type="tas:CertPathValidationPolicyID">
              <xs:annotation>
                <xs:documentation>
                  tbd
                </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="ReplaceCertPathValidationPolicyAssignmentResponse">
        <xs:complexType>
          <xs:sequence />
        </xs:complexType>
      </xs:element>
      <!--===============================-->
      <xs:element name="GetAssignedCertPathValidationPolicies">
        <xs:complexType>
          <xs:sequence />
        </xs:complexType>
      </xs:element>
      <xs:element name="GetAssignedCertPathValidationPoliciesResponse">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="CertPathValidationPolicyID" type="tas:CertPathValidationPolicyID" minOccurs="0" maxOccurs="unbounded">
              <xs:annotation>
                <xs:documentation>
                  tbd
                </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <!--=============================================-->
      <!-- Begin Cert-based client auth message types   -->
      <!--=============================================-->
			<!--===============================-->
			<xs:element name="AddDot1XConfiguration">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="Dot1XConfiguration" type="tas:Dot1XConfiguration">
							<xs:annotation>
								<xs:documentation>The desired 802.1X configuration.</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="Alias" type="xs:string" minOccurs="0">
							<xs:annotation>
								<xs:documentation>The client-defined alias of the 802.1X configuration.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="AddDot1XConfigurationResponse">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="Dot1XID" type="tas:Dot1XID">
							<xs:annotation>
								<xs:documentation>The unique identifier of the created 802.1X configuration.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<!--===============================-->
			<xs:element name="GetAllDot1XConfigurations">
				<xs:complexType>
					<xs:sequence/>
				</xs:complexType>
			</xs:element>
			<xs:element name="GetAllDot1XConfigurationsResponse">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="Configuration" type="tas:Dot1XSummary" minOccurs="0" maxOccurs="unbounded">
							<xs:annotation>
								<xs:documentation>The list of unique identifiers of 802.1X configurations on the device.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<!--===============================-->
			<xs:element name="GetDot1XConfiguration">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="Dot1XID" type="tas:Dot1XID">
							<xs:annotation>
								<xs:documentation>The unique identifier of the desired 802.1X configuration.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="GetDot1XConfigurationResponse">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="Dot1XConfiguration" type="tas:Dot1XConfiguration">
							<xs:annotation>
								<xs:documentation>The 802.1X configuration, without password information.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<!--===============================-->
			<xs:element name="DeleteDot1XConfiguration">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="Dot1XID" type="tas:Dot1XID">
							<xs:annotation>
								<xs:documentation>The unique identifier of the 802.1X configuration to be deleted.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="DeleteDot1XConfigurationResponse">
				<xs:complexType>
					<xs:sequence/>
				</xs:complexType>
			</xs:element>
			<!--===============================-->
			<xs:element name="SetNetworkInterfaceDot1XConfiguration">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="token" type="xs:string">
							<xs:annotation>
								<xs:documentation>The unique identifier of the Network Interface on which the 802.1X configuration is to be set. (NOTE: the network interface token is defined in devicemgmt.wsdl as tt:ReferenceToken, which is a derived type of xs:string.  To avoid importing all of onvif.xsd for this single type, the base type is used here.)</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="Dot1XID" type="tas:Dot1XID">
							<xs:annotation>
								<xs:documentation>The unique identifier of the 802.1X configuration to be set.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="SetNetworkInterfaceDot1XConfigurationResponse">
				<xs:complexType>
					<xs:sequence/>
				</xs:complexType>
			</xs:element>
			<!--===============================-->
			<xs:element name="GetNetworkInterfaceDot1XConfiguration">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="token" type="xs:string">
							<xs:annotation>
								<xs:documentation>The unique identifier of the Network Interface for which the 802.1X configuration is to be retrieved. (NOTE: the network interface token is defined in devicemgmt.wsdl as tt:ReferenceToken, which is a derived type of xs:string.  To avoid importing all of onvif.xsd for this single type, the base type is used here.)</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="GetNetworkInterfaceDot1XConfigurationResponse">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="Dot1XID" type="tas:Dot1XID" minOccurs="0">
							<xs:annotation>
								<xs:documentation>The unique identifier of 802.1X configuration assigned to the Network Interface.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<!--===============================-->
			<xs:element name="DeleteNetworkInterfaceDot1XConfiguration">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="token" type="xs:string">
							<xs:annotation>
								<xs:documentation>The unique identifier of the Network Interface for which the 802.1X configuration is to be deleted. (NOTE: the network interface token is defined in devicemgmt.wsdl as tt:ReferenceToken, which is a derived type of xs:string.  To avoid importing all of onvif.xsd for this single type, the base type is used here.)</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="DeleteNetworkInterfaceDot1XConfigurationResponse">
				<xs:complexType>
					<xs:sequence/>
				</xs:complexType>
			</xs:element>
		</xs:schema>
