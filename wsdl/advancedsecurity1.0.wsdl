<?xml version="1.0" encoding="UTF-8"?>
<wsdl:definitions xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:tas="http://www.onvif.org/ver10/advancedsecurity/wsdl" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap12/" targetNamespace="http://www.onvif.org/ver10/advancedsecurity/wsdl">
	<wsdl:types>
		<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" targetNamespace="http://www.onvif.org/ver10/advancedsecurity/wsdl" version="1.0">
			<!--===================================================-->
			<!-- Data types used by the advanced security features -->
			<!--===================================================-->
			<xs:simpleType name="ID">
				<xs:restriction base="xs:token">
					<xs:annotation>
						<xs:documentation>Unique identifier for objects in the key store.</xs:documentation>
					</xs:annotation>
				</xs:restriction>
			</xs:simpleType>
			<!--===============================-->
			<xs:simpleType name="KeyID">
				<xs:restriction base="xs:ID">
					<xs:annotation>
						<xs:documentation>Unique identifier for keys in the key store.</xs:documentation>
					</xs:annotation>
				</xs:restriction>
			</xs:simpleType>
			<!--===============================-->
			<xs:simpleType name="CertificateID">
				<xs:restriction base="xs:ID">
					<xs:annotation>
						<xs:documentation>Unique identifier for certificates in the key store.</xs:documentation>
					</xs:annotation>
				</xs:restriction>
			</xs:simpleType>
			<!--===============================-->
			<xs:simpleType name="CertificationPathID">
				<xs:restriction base="xs:ID">
					<xs:annotation>
						<xs:documentation>Unique identifier for certification paths in the key store.</xs:documentation>
					</xs:annotation>
				</xs:restriction>
			</xs:simpleType>
			<!--===============================-->
			<xs:simpleType name="KeyStatus">
				<xs:restriction base="xs:string">
					<xs:enumeration value="ok">
						<xs:annotation>
							<xs:documentation>Key is ready for use</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="generating">
						<xs:annotation>
							<xs:documentation>Key is being generated</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="corrupt">
						<xs:annotation>
							<xs:documentation>Key has not been successfully generated and cannot be used.</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
				</xs:restriction>
			</xs:simpleType>
			<!--===============================-->
			<xs:simpleType name="DotDecimalOID">
				<xs:restriction base="xs:string">
					<xs:pattern value="[0-9]+(.[0-9]+)*">
						<xs:annotation>
							<xs:documentation>An object identifier (OID) in dot-decimal form as specified in RFC4512.</xs:documentation>
						</xs:annotation>
					</xs:pattern>
				</xs:restriction>
			</xs:simpleType>
			<!--===============================-->
			<xs:simpleType name="DNAttributeType">
				<xs:restriction base="xs:string">
					<xs:annotation>
						<xs:documentation>The distinguished name attribute type shall be encoded as specified in RFC 4514.</xs:documentation>
					</xs:annotation>
				</xs:restriction>
			</xs:simpleType>
			<!--===============================-->
			<xs:simpleType name="DNAttributeValue">
				<xs:restriction base="xs:string">
					<xs:annotation>
						<xs:documentation>The distinguished name attribute values shall be encoded in hexadecimal form as specified in RFC 4514.</xs:documentation>
					</xs:annotation>
				</xs:restriction>
			</xs:simpleType>
			<!--===============================-->
			<xs:complexType name="KeyAttribute">
				<xs:sequence>
					<xs:element name="KeyID" type="tas:KeyID">
						<xs:annotation>
							<xs:documentation>The ID of the key.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Alias" type="xs:string" minOccurs="0">
						<xs:annotation>
							<xs:documentation>The alias of the key</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="hasPrivateKey" type="xs:boolean" minOccurs="0">
						<xs:annotation>
							<xs:documentation>Absent if the key is not a key pair. True if and only if the key is a key pair and contains a private key. False if and only if the key is a key pair and does not contain a private key.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="KeyStatus" type="xs:string">
						<xs:annotation>
							<xs:documentation>The status of the key.  The value should be one of the values in the tas:KeyStatus enumeration.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:any namespace="##any" processContents="lax"/>
				</xs:sequence>
				<xs:anyAttribute processContents="lax"/>
			</xs:complexType>
			<!--===============================-->
			<xs:complexType name="DNAttributeTypeAndValue">
				<xs:sequence>
					<xs:element name="Type" type="tas:DNAttributeType"/>
					<xs:element name="Value" type="tas:DNAttributeValue"/>
				</xs:sequence>
				<xs:anyAttribute processContents="lax"/>
			</xs:complexType>
			<!--===============================-->
			<xs:complexType name="DistinguishedName">
				<xs:sequence>
					<xs:element minOccurs="0" maxOccurs="unbounded" name="Country" type="tas:DNAttributeValue"/>
					<xs:element minOccurs="0" maxOccurs="unbounded" name="Organization" type="tas:DNAttributeValue"/>
					<xs:element minOccurs="0" maxOccurs="unbounded" name="OrganizationalUnit" type="tas:DNAttributeValue"/>
					<xs:element minOccurs="0" maxOccurs="unbounded" name="DistinguishedNameQualifier" type="tas:DNAttributeValue"/>
					<xs:element minOccurs="0" maxOccurs="unbounded" name="StateOrProvinceName" type="tas:DNAttributeValue"/>
					<xs:element minOccurs="0" maxOccurs="unbounded" name="CommonName" type="tas:DNAttributeValue"/>
					<xs:element minOccurs="0" maxOccurs="unbounded" name="SerialNumber" type="tas:DNAttributeValue"/>
					<xs:element minOccurs="0" maxOccurs="unbounded" name="Locality" type="tas:DNAttributeValue"/>
					<xs:element minOccurs="0" maxOccurs="unbounded" name="Title" type="tas:DNAttributeValue"/>
					<xs:element minOccurs="0" maxOccurs="unbounded" name="Surname" type="tas:DNAttributeValue"/>
					<xs:element minOccurs="0" maxOccurs="unbounded" name="GivenName" type="tas:DNAttributeValue"/>
					<xs:element minOccurs="0" maxOccurs="unbounded" name="Initials" type="tas:DNAttributeValue"/>
					<xs:element minOccurs="0" maxOccurs="unbounded" name="Pseudonym" type="tas:DNAttributeValue"/>
					<xs:element minOccurs="0" maxOccurs="unbounded" name="GenerationQualifier" type="tas:DNAttributeValue"/>
					<xs:element minOccurs="0" maxOccurs="unbounded" name="GenericAttribute" type="tas:DNAttributeTypeAndValue"/>
					<xs:element minOccurs="0" name="anyAttribute">
						<xs:complexType>
							<xs:sequence>
								<xs:any maxOccurs="unbounded" namespace="##any" processContents="lax"/>
							</xs:sequence>
						</xs:complexType>
					</xs:element>
				</xs:sequence>
				<xs:anyAttribute processContents="lax"/>
			</xs:complexType>
			<!--===============================-->
			<xs:complexType name="AlgorithmIdentifier">
				<xs:sequence>
					<xs:element name="algorithm" type="tas:DotDecimalOID">
						<xs:annotation>
							<xs:documentation>OID of the algorithm in dot-decimal form</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element minOccurs="0" name="parameters" type="tas:Base64DERencodedASN1Value">
						<xs:annotation>
							<xs:documentation>Optional parameters of the algorithm</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element minOccurs="0" name="anyParameters">
						<xs:complexType>
							<xs:sequence>
								<xs:any maxOccurs="unbounded" namespace="##any" processContents="lax"/>
							</xs:sequence>
						</xs:complexType>
					</xs:element>
				</xs:sequence>
				<xs:anyAttribute processContents="lax"/>
			</xs:complexType>
			<!--===============================-->
			<xs:complexType name="CSRAttribute">
				<xs:annotation>
					<xs:documentation>A CSR attribute as specified in PKCS#10</xs:documentation>
				</xs:annotation>
				<xs:choice>
					<xs:element name="X509v3Extension" type="tas:X509v3Extension">
						<xs:annotation>
							<xs:documentation>Extension request</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="GenericAttribute" type="tas:Base64DERencodedASN1Value">
						<xs:annotation>
							<xs:documentation>Generic attribute</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element minOccurs="0" name="anyAttribute">
						<xs:complexType>
							<xs:sequence>
								<xs:any maxOccurs="unbounded" namespace="##any" processContents="lax"/>
							</xs:sequence>
						</xs:complexType>
					</xs:element>
				</xs:choice>
				<xs:anyAttribute processContents="lax"/>
			</xs:complexType>
			<!--===============================-->
			<xs:simpleType name="Base64DERencodedASN1Value">
				<xs:restriction base="xs:base64Binary"/>
			</xs:simpleType>
			<!--===============================-->
			<xs:complexType name="X509v3Extension">
				<xs:annotation>
					<xs:documentation>An X.509v3 extension field as specified in RFC 5280</xs:documentation>
				</xs:annotation>
				<xs:sequence>
					<xs:element name="extnOID" type="tas:DotDecimalOID">
						<xs:annotation>
							<xs:documentation>The OID of the extension field.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element default="false" name="critical" type="xs:boolean">
						<xs:annotation>
							<xs:documentation>True if and only if the extension is critical.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="extnValue" type="tas:Base64DERencodedASN1Value">
						<xs:annotation>
							<xs:documentation>The value of the extension field as a base64-encoded DER representation of an ASN.1 value.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:any maxOccurs="unbounded" namespace="##any" processContents="lax"/>
				</xs:sequence>
				<xs:anyAttribute processContents="lax"/>
			</xs:complexType>
			<!--===============================-->
			<xs:complexType name="X509Certificate">
				<xs:sequence>
					<xs:element name="CertificateID" type="tas:CertificateID">
						<xs:annotation>
							<xs:documentation>The ID of the certificate</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="KeyID" type="tas:KeyID">
						<xs:annotation>
							<xs:documentation>The ID of the key that this certificate associates to the certificate subject.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Alias" type="xs:string" minOccurs="0">
						<xs:annotation>
							<xs:documentation>The alias of the certificate</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="CertificateContent" type="tas:Base64DERencodedASN1Value">
						<xs:annotation>
							<xs:documentation>The base64-encoded DER representation of the X.509 certificate</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:any maxOccurs="unbounded" namespace="##any" processContents="lax"/>
				</xs:sequence>
				<xs:anyAttribute processContents="lax"/>
			</xs:complexType>
			<!--===============================-->
			<xs:complexType name="CertificateIDs">
				<xs:sequence>
					<xs:element maxOccurs="unbounded" name="CertificateID" type="tas:CertificateID">
						<xs:annotation>
							<xs:documentation>A certificate in the list of certificate IDs</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:anyAttribute processContents="lax"/>
			</xs:complexType>
			<!--===============================-->
			<xs:complexType name="CertificationPath">
				<xs:sequence>
					<xs:element maxOccurs="unbounded" name="CertificateID" type="tas:CertificateID">
						<xs:annotation>
							<xs:documentation>A certificate in the certification path</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Alias" type="xs:string" minOccurs="0">
						<xs:annotation>
							<xs:documentation>The alias of the certification path</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:anyAttribute processContents="lax"/>
			</xs:complexType>
			<!--===============================-->
			<xs:simpleType name="RSAKeyLengths">
				<xs:list itemType="xs:int"/>
			</xs:simpleType>
			<xs:simpleType name="X509Versions">
				<xs:list itemType="xs:int"/>
			</xs:simpleType>
			<xs:simpleType name="TLSVersions">
				<xs:list itemType="xs:string"/>
			</xs:simpleType>
			<!--===============================-->
			<xs:complexType name="KeystoreCapabilities">
				<xs:sequence>
					<xs:element minOccurs="0" maxOccurs="unbounded" name="SignatureAlgorithms" type="tas:AlgorithmIdentifier"/>
				</xs:sequence>
				<xs:attribute name="MaximumNumberOfKeys" type="xs:positiveInteger">
					<xs:annotation>
						<xs:documentation>Indicates the maximum number of keys that the device can store simultaneously.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="MaximumNumberOfCertificates" type="xs:positiveInteger">
					<xs:annotation>
						<xs:documentation>Indicates the maximum number of certificates that the device can store simultaneously.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="MaximumNumberOfCertificationPaths" type="xs:positiveInteger">
					<xs:annotation>
						<xs:documentation>Indicates the maximum number of certification paths that the device can store simultaneously.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="RSAKeyPairGeneration" type="xs:boolean">
					<xs:annotation>
						<xs:documentation>Indication that the device supports on-board RSA key pair generation.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="RSAKeyLengths" type="tas:RSAKeyLengths">
					<xs:annotation>
						<xs:documentation>Indicates which RSA key lengths are supported by the device.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="PKCS10ExternalCertificationWithRSA" type="xs:boolean">
					<xs:annotation>
						<xs:documentation>Indication support for generating PKCS#10 requests.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="SelfSignedCertificateCreationWithRSA" type="xs:boolean">
					<xs:annotation>
						<xs:documentation>Indication support for creating self-signed certificates.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="X509Versions" type="tas:X509Versions">
					<xs:annotation>
						<xs:documentation>Indicates which X.509 versions are supported by the device.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:anyAttribute processContents="lax"/>
			</xs:complexType>
			<!--===============================-->
			<xs:complexType name="TLSServerCapabilities">
				<xs:sequence>
					<xs:any namespace="##any" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
				</xs:sequence>
				<xs:attribute name="TLSServerSupported" type="tas:TLSVersions">
					<xs:annotation>
						<xs:documentation>Indicates which TLS versions are supported by the device.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="MaximumNumberOfTLSCertificationPaths" type="xs:positiveInteger">
					<xs:annotation>
						<xs:documentation>Indicates the maximum number of certification paths that may be assigned to the TLS server simultaneously.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:anyAttribute processContents="lax"/>
			</xs:complexType>
			<!--===============================-->
			<xs:complexType name="Capabilities">
				<xs:sequence>
					<xs:element name="KeystoreCapabilities" type="tas:KeystoreCapabilities"/>
					<xs:element name="TLSServerCapabilities" type="tas:TLSServerCapabilities"/>
					<xs:any namespace="##any" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
				</xs:sequence>
				<xs:anyAttribute processContents="lax"/>
			</xs:complexType>
			<xs:element name="Capabilities" type="tas:Capabilities"/>
			<!--=========================================-->
			<!-- Request/response elements               -->
			<!--=========================================-->
			<xs:element name="GetServiceCapabilities">
				<xs:complexType>
					<xs:sequence/>
				</xs:complexType>
			</xs:element>
			<xs:element name="GetServiceCapabilitiesResponse">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="Capabilities" type="tas:Capabilities">
							<xs:annotation>
								<xs:documentation>The capabilities for the advanced secuirty service is returned in the Capabilities element.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<!--===============================-->
			<xs:element name="CreateRSAKeyPair">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="KeyLength" type="xs:nonNegativeInteger">
							<xs:annotation>
								<xs:documentation>The length of the key to be created.</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="Alias" type="xs:string" minOccurs="0">
							<xs:annotation>
								<xs:documentation>The alias of the key</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="CreateRSAKeyPairResponse">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="KeyID" type="tas:KeyID">
							<xs:annotation>
								<xs:documentation>The key ID of the key pair being generated.</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="EstimatedCreationTime" type="xs:duration">
							<xs:annotation>
								<xs:documentation>Best-effort estimate of how long the key generation will take.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<!--===============================-->
			<xs:element name="GetKeyStatus">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="KeyID" type="tas:KeyID">
							<xs:annotation>
								<xs:documentation>The ID of the key for which to return the status.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="GetKeyStatusResponse">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="KeyStatus" type="xs:string">
							<xs:annotation>
								<xs:documentation>Status of the requested key. The value should be one of the values in the tas:KeyStatus enumeration.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<!--===============================-->
			<xs:element name="GetPrivateKeyStatus">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="KeyID" type="tas:KeyID">
							<xs:annotation>
								<xs:documentation>The ID of the key pair for which to return whether it contains a private key.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="GetPrivateKeyStatusResponse">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="hasPrivateKey" type="xs:boolean">
							<xs:annotation>
								<xs:documentation>True if and only if the key pair contains a private key.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<!--===============================-->
			<xs:element name="GetAllKeys">
				<xs:complexType>
					<xs:sequence/>
				</xs:complexType>
			</xs:element>
			<xs:element name="GetAllKeysResponse">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="KeyAttribute" type="tas:KeyAttribute" minOccurs="0" maxOccurs="unbounded">
							<xs:annotation>
								<xs:documentation>A list with information about all keys in the keystore.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<!--===============================-->
			<xs:element name="DeleteKey">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="KeyID" type="tas:KeyID">
							<xs:annotation>
								<xs:documentation>The ID of the key that is to be deleted from the key store.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="DeleteKeyResponse">
				<xs:complexType>
					<xs:sequence/>
				</xs:complexType>
			</xs:element>
			<!--===============================-->
			<xs:element name="CreatePKCS10CSR">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="Subject" type="tas:DistinguishedName">
							<xs:annotation>
								<xs:documentation>The subject to be included in the CSR.</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="KeyID" type="tas:KeyID">
							<xs:annotation>
								<xs:documentation>The ID of the key for which the CSR shall be created.</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="CSRAttribute" minOccurs="0" maxOccurs="unbounded" type="tas:CSRAttribute">
							<xs:annotation>
								<xs:documentation>The attributes to be included in the CSR.</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="SignatureAlgorithm" minOccurs="0" type="tas:AlgorithmIdentifier">
							<xs:annotation>
								<xs:documentation>The signature algorithm to be used to sign the CSR (defaults to SHA1 with RSA Encryption).</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="CreatePKCS10CSRResponse">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="PKCS10CSR" type="tas:Base64DERencodedASN1Value">
							<xs:annotation>
								<xs:documentation>The DER encoded PKCS#10 certification request.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<!--===============================-->
			<xs:element name="CreateSelfSignedCertificate">
				<xs:complexType>
					<xs:sequence>
						<xs:element minOccurs="0" name="X509Version" type="xs:positiveInteger">
							<xs:annotation>
								<xs:documentation>The X.509 version that the generated certificate shall comply to.</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="Subject" type="tas:DistinguishedName">
							<xs:annotation>
								<xs:documentation>The subject to be included in the certificate.</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="KeyID" type="tas:KeyID">
							<xs:annotation>
								<xs:documentation>The ID of the key for which the certificate shall be created.</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="Alias" type="xs:string" minOccurs="0">
							<xs:annotation>
								<xs:documentation>The alias of the certificate</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element minOccurs="0" name="notValidBefore" type="xs:dateTime">
							<xs:annotation>
								<xs:documentation>The X.509 not validValidBefore information to be included in the certificate.</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element minOccurs="0" name="notValidAfter" type="xs:dateTime">
							<xs:annotation>
								<xs:documentation>The X.509 not validValidAfter information to be included in the certificate.</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="SignatureAlgorithm" minOccurs="0" type="tas:AlgorithmIdentifier">
							<xs:annotation>
								<xs:documentation>The signature algorithm to be used for signing the certificate (defaults to SHA1 with RSA Encryption).</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element minOccurs="0" maxOccurs="unbounded" name="Extension" type="tas:X509v3Extension">
							<xs:annotation>
								<xs:documentation>X.509v3 extension to be included in the certificate.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="CreateSelfSignedCertificateResponse">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CertificateID" type="tas:CertificateID">
							<xs:annotation>
								<xs:documentation>The ID of the generated certificate.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<!--===============================-->
			<xs:element name="UploadCertificate">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="Certificate" type="tas:Base64DERencodedASN1Value">
							<xs:annotation>
								<xs:documentation>The base64-encoded DER representation of the X.509 certificate</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="Alias" type="xs:string" minOccurs="0">
							<xs:annotation>
								<xs:documentation>The alias of the certificate</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="PrivateKeyRequired" type="xs:boolean" minOccurs="0" default="false">
							<xs:annotation>
								<xs:documentation>Indicates if the device shall verify that a matching key pair with a private key exists</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="UploadCertificateResponse">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CertificateID" type="tas:CertificateID">
							<xs:annotation>
								<xs:documentation>The ID of the uploaded certificate.</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="KeyID" type="tas:KeyID">
							<xs:annotation>
								<xs:documentation>The ID of the key that the uploaded certificate certifies.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<!--===============================-->
			<xs:element name="GetCertificate">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CertificateID" type="tas:CertificateID">
							<xs:annotation>
								<xs:documentation>The ID of the certificate to retrieve.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="GetCertificateResponse">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="Certificate" type="tas:X509Certificate">
							<xs:annotation>
								<xs:documentation>The DER representation of the certificate.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<!--===============================-->
			<xs:element name="GetAllCertificates">
				<xs:complexType>
					<xs:sequence/>
				</xs:complexType>
			</xs:element>
			<xs:element name="GetAllCertificatesResponse">
				<xs:complexType>
					<xs:sequence>
						<xs:element minOccurs="0" maxOccurs="unbounded" name="Certificate" type="tas:X509Certificate">
							<xs:annotation>
								<xs:documentation>The certificates stored in the key store.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<!--===============================-->
			<xs:element name="DeleteCertificate">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CertificateID" type="tas:CertificateID">
							<xs:annotation>
								<xs:documentation>The ID of the certificate to delete.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="DeleteCertificateResponse">
				<xs:complexType>
					<xs:sequence/>
				</xs:complexType>
			</xs:element>
			<!--===============================-->
			<xs:element name="CreateCertificationPath">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CertificateIDs" type="tas:CertificateIDs">
							<xs:annotation>
								<xs:documentation>The IDs of the certificates to include in the certification path.</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="Alias" type="xs:string" minOccurs="0">
							<xs:annotation>
								<xs:documentation>The alias of the certification path</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="CreateCertificationPathResponse">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CertificationPathID" type="tas:CertificationPathID">
							<xs:annotation>
								<xs:documentation>The ID of the generated certification path.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<!--===============================-->
			<xs:element name="GetCertificationPath">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CertificationPathID" type="tas:CertificationPathID">
							<xs:annotation>
								<xs:documentation>The ID of the certification paths in the keystore.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="GetCertificationPathResponse">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CertificationPath" type="tas:CertificationPath">
							<xs:annotation>
								<xs:documentation>The certification path that is stored under the given ID in the keystore.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<!--===============================-->
			<xs:element name="GetAllCertificationPaths">
				<xs:complexType>
					<xs:sequence/>
				</xs:complexType>
			</xs:element>
			<xs:element name="GetAllCertificationPathsResponse">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CertificationPathID" type="tas:CertificationPathID" minOccurs="0" maxOccurs="unbounded">
							<xs:annotation>
								<xs:documentation>The IDs of all certification paths in the keystore.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<!--===============================-->
			<xs:element name="DeleteCertificationPath">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CertificationPathID" type="tas:CertificationPathID">
							<xs:annotation>
								<xs:documentation>The ID of the certification path to delete.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="DeleteCertificationPathResponse">
				<xs:complexType>
					<xs:sequence/>
				</xs:complexType>
			</xs:element>
			<!--===============================-->
			<xs:element name="AddServerCertificateAssignment">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CertificationPathID" type="tas:CertificationPathID"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="AddServerCertificateAssignmentResponse">
				<xs:complexType>
					<xs:sequence/>
				</xs:complexType>
			</xs:element>
			<!--===============================-->
			<xs:element name="RemoveServerCertificateAssignment">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CertificationPathID" type="tas:CertificationPathID"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="RemoveServerCertificateAssignmentResponse">
				<xs:complexType>
					<xs:sequence/>
				</xs:complexType>
			</xs:element>
			<!--===============================-->
			<xs:element name="ReplaceServerCertificateAssignment">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="OldCertificationPathID" type="tas:CertificationPathID"/>
						<xs:element name="NewCertificationPathID" type="tas:CertificationPathID"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="ReplaceServerCertificateAssignmentResponse">
				<xs:complexType>
					<xs:sequence/>
				</xs:complexType>
			</xs:element>
			<!--===============================-->
			<xs:element name="GetAssignedServerCertificates">
				<xs:complexType>
					<xs:sequence/>
				</xs:complexType>
			</xs:element>
			<xs:element name="GetAssignedServerCertificatesResponse">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="CertificationPathID" type="tas:CertificationPathID" minOccurs="0" maxOccurs="unbounded">
							<xs:annotation>
								<xs:documentation>The IDs of all certification paths that are assigned to the TLS server on the device.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
		</xs:schema>
	</wsdl:types>
	<wsdl:message name="GetServiceCapabilitiesRequest">
		<wsdl:part name="parameters" element="tas:GetServiceCapabilities"/>
	</wsdl:message>
	<wsdl:message name="GetServiceCapabilitiesResponse">
		<wsdl:part name="parameters" element="tas:GetServiceCapabilitiesResponse"/>
	</wsdl:message>
	<wsdl:message name="CreateRSAKeyPairRequest">
		<wsdl:part name="parameters" element="tas:CreateRSAKeyPair"/>
	</wsdl:message>
	<wsdl:message name="CreateRSAKeyPairResponse">
		<wsdl:part name="parameters" element="tas:CreateRSAKeyPairResponse"/>
	</wsdl:message>
	<wsdl:message name="GetKeyStatusRequest">
		<wsdl:part name="parameters" element="tas:GetKeyStatus"/>
	</wsdl:message>
	<wsdl:message name="GetKeyStatusResponse">
		<wsdl:part name="parameters" element="tas:GetKeyStatusResponse"/>
	</wsdl:message>
	<wsdl:message name="GetPrivateKeyStatusRequest">
		<wsdl:part name="parameters" element="tas:GetPrivateKeyStatus"/>
	</wsdl:message>
	<wsdl:message name="GetPrivateKeyStatusResponse">
		<wsdl:part name="parameters" element="tas:GetPrivateKeyStatusResponse"/>
	</wsdl:message>
	<wsdl:message name="GetAllKeysRequest">
		<wsdl:part name="parameters" element="tas:GetAllKeys"/>
	</wsdl:message>
	<wsdl:message name="GetAllKeysResponse">
		<wsdl:part name="parameters" element="tas:GetAllKeysResponse"/>
	</wsdl:message>
	<wsdl:message name="DeleteKeyRequest">
		<wsdl:part name="parameters" element="tas:DeleteKey"/>
	</wsdl:message>
	<wsdl:message name="DeleteKeyResponse">
		<wsdl:part name="parameters" element="tas:DeleteKeyResponse"/>
	</wsdl:message>
	<wsdl:message name="CreatePKCS10CSRRequest">
		<wsdl:part name="parameters" element="tas:CreatePKCS10CSR"/>
	</wsdl:message>
	<wsdl:message name="CreatePKCS10CSRResponse">
		<wsdl:part name="parameters" element="tas:CreatePKCS10CSRResponse"/>
	</wsdl:message>
	<wsdl:message name="CreateSelfSignedCertificateRequest">
		<wsdl:part name="parameters" element="tas:CreateSelfSignedCertificate"/>
	</wsdl:message>
	<wsdl:message name="CreateSelfSignedCertificateResponse">
		<wsdl:part name="parameters" element="tas:CreateSelfSignedCertificateResponse"/>
	</wsdl:message>
	<wsdl:message name="UploadCertificateRequest">
		<wsdl:part name="parameters" element="tas:UploadCertificate"/>
	</wsdl:message>
	<wsdl:message name="UploadCertificateResponse">
		<wsdl:part name="parameters" element="tas:UploadCertificateResponse"/>
	</wsdl:message>
	<wsdl:message name="GetCertificateRequest">
		<wsdl:part name="parameters" element="tas:GetCertificate"/>
	</wsdl:message>
	<wsdl:message name="GetCertificateResponse">
		<wsdl:part name="parameters" element="tas:GetCertificateResponse"/>
	</wsdl:message>
	<wsdl:message name="GetAllCertificatesRequest">
		<wsdl:part name="parameters" element="tas:GetAllCertificates"/>
	</wsdl:message>
	<wsdl:message name="GetAllCertificatesResponse">
		<wsdl:part name="parameters" element="tas:GetAllCertificatesResponse"/>
	</wsdl:message>
	<wsdl:message name="DeleteCertificateRequest">
		<wsdl:part name="parameters" element="tas:DeleteCertificate"/>
	</wsdl:message>
	<wsdl:message name="DeleteCertificateResponse">
		<wsdl:part name="parameters" element="tas:DeleteCertificateResponse"/>
	</wsdl:message>
	<wsdl:message name="CreateCertificationPathRequest">
		<wsdl:part name="parameters" element="tas:CreateCertificationPath"/>
	</wsdl:message>
	<wsdl:message name="CreateCertificationPathResponse">
		<wsdl:part name="parameters" element="tas:CreateCertificationPathResponse"/>
	</wsdl:message>
	<wsdl:message name="GetCertificationPathRequest">
		<wsdl:part name="parameters" element="tas:GetCertificationPath"/>
	</wsdl:message>
	<wsdl:message name="GetCertificationPathResponse">
		<wsdl:part name="parameters" element="tas:GetCertificationPathResponse"/>
	</wsdl:message>
	<wsdl:message name="GetAllCertificationPathsRequest">
		<wsdl:part name="parameters" element="tas:GetAllCertificationPaths"/>
	</wsdl:message>
	<wsdl:message name="GetAllCertificationPathsResponse">
		<wsdl:part name="parameters" element="tas:GetAllCertificationPathsResponse"/>
	</wsdl:message>
	<wsdl:message name="DeleteCertificationPathRequest">
		<wsdl:part name="parameters" element="tas:DeleteCertificationPath"/>
	</wsdl:message>
	<wsdl:message name="DeleteCertificationPathResponse">
		<wsdl:part name="parameters" element="tas:DeleteCertificationPathResponse"/>
	</wsdl:message>
	<wsdl:message name="AddServerCertificateAssignmentRequest">
		<wsdl:part name="parameters" element="tas:AddServerCertificateAssignment"/>
	</wsdl:message>
	<wsdl:message name="AddServerCertificateAssignmentResponse">
		<wsdl:part name="parameters" element="tas:AddServerCertificateAssignmentResponse"/>
	</wsdl:message>
	<wsdl:message name="RemoveServerCertificateAssignmentRequest">
		<wsdl:part name="parameters" element="tas:RemoveServerCertificateAssignment"/>
	</wsdl:message>
	<wsdl:message name="RemoveServerCertificateAssignmentResponse">
		<wsdl:part name="parameters" element="tas:RemoveServerCertificateAssignmentResponse"/>
	</wsdl:message>
	<wsdl:message name="ReplaceServerCertificateAssignmentRequest">
		<wsdl:part name="parameters" element="tas:ReplaceServerCertificateAssignment"/>
	</wsdl:message>
	<wsdl:message name="ReplaceServerCertificateAssignmentResponse">
		<wsdl:part name="parameters" element="tas:ReplaceServerCertificateAssignmentResponse"/>
	</wsdl:message>
	<wsdl:message name="GetAssignedServerCertificatesRequest">
		<wsdl:part name="parameters" element="tas:GetAssignedServerCertificates"/>
	</wsdl:message>
	<wsdl:message name="GetAssignedServerCertificatesResponse">
		<wsdl:part name="parameters" element="tas:GetAssignedServerCertificatesResponse"/>
	</wsdl:message>
	<wsdl:portType name="AdvancedSecurityService">
		<wsdl:documentation>Common functionality for the all advanced security service parts.</wsdl:documentation>
		<wsdl:operation name="GetServiceCapabilities">
			<wsdl:documentation>Returns the capabilities of the advanced security service. The result is returned in a typed answer.</wsdl:documentation>
			<wsdl:input message="tas:GetServiceCapabilitiesRequest"/>
			<wsdl:output message="tas:GetServiceCapabilitiesResponse"/>
		</wsdl:operation>
	</wsdl:portType>
	<wsdl:portType name="Keystore">
		<wsdl:documentation>Basic key store functionality.</wsdl:documentation>
		<wsdl:operation name="CreateRSAKeyPair">
			<wsdl:documentation>Generates an RSA key pair.</wsdl:documentation>
			<wsdl:input message="tas:CreateRSAKeyPairRequest"/>
			<wsdl:output message="tas:CreateRSAKeyPairResponse"/>
		</wsdl:operation>
		<wsdl:operation name="GetKeyStatus">
			<wsdl:documentation>Returns the status of a key.</wsdl:documentation>
			<wsdl:input message="tas:GetKeyStatusRequest"/>
			<wsdl:output message="tas:GetKeyStatusResponse"/>
		</wsdl:operation>
		<wsdl:operation name="GetPrivateKeyStatus">
			<wsdl:documentation>Returns whether a key pair ID contains a private key.</wsdl:documentation>
			<wsdl:input message="tas:GetPrivateKeyStatusRequest"/>
			<wsdl:output message="tas:GetPrivateKeyStatusResponse"/>
		</wsdl:operation>
		<wsdl:operation name="GetAllKeys">
			<wsdl:documentation>Returns information about all keys that are stored in the device’s keystore</wsdl:documentation>
			<wsdl:input message="tas:GetAllKeysRequest"/>
			<wsdl:output message="tas:GetAllKeysResponse"/>
		</wsdl:operation>
		<wsdl:operation name="DeleteKey">
			<wsdl:documentation>Deletes a key from the key store.</wsdl:documentation>
			<wsdl:input message="tas:DeleteKeyRequest"/>
			<wsdl:output message="tas:DeleteKeyResponse"/>
		</wsdl:operation>
		<wsdl:operation name="CreatePKCS10CSR">
			<wsdl:documentation>Generates a PKCS#10 certification request.</wsdl:documentation>
			<wsdl:input message="tas:CreatePKCS10CSRRequest"/>
			<wsdl:output message="tas:CreatePKCS10CSRResponse"/>
		</wsdl:operation>
		<wsdl:operation name="CreateSelfSignedCertificate">
			<wsdl:documentation>Generates a self-signed certificate.</wsdl:documentation>
			<wsdl:input message="tas:CreateSelfSignedCertificateRequest"/>
			<wsdl:output message="tas:CreateSelfSignedCertificateResponse"/>
		</wsdl:operation>
		<wsdl:operation name="UploadCertificate">
			<wsdl:documentation>Uploads a certificate to the key store.</wsdl:documentation>
			<wsdl:input message="tas:UploadCertificateRequest"/>
			<wsdl:output message="tas:UploadCertificateResponse"/>
		</wsdl:operation>
		<wsdl:operation name="GetCertificate">
			<wsdl:documentation>Returns a certificate in its DER representation from the key store.</wsdl:documentation>
			<wsdl:input message="tas:GetCertificateRequest"/>
			<wsdl:output message="tas:GetCertificateResponse"/>
		</wsdl:operation>
		<wsdl:operation name="GetAllCertificates">
			<wsdl:documentation>Returns all certificate in their DER representations from the key store.</wsdl:documentation>
			<wsdl:input message="tas:GetAllCertificatesRequest"/>
			<wsdl:output message="tas:GetAllCertificatesResponse"/>
		</wsdl:operation>
		<wsdl:operation name="DeleteCertificate">
			<wsdl:documentation>Deletes a certificate from the key store.</wsdl:documentation>
			<wsdl:input message="tas:DeleteCertificateRequest"/>
			<wsdl:output message="tas:DeleteCertificateResponse"/>
		</wsdl:operation>
		<wsdl:operation name="CreateCertificationPath">
			<wsdl:documentation>Creates a certification path.</wsdl:documentation>
			<wsdl:input message="tas:CreateCertificationPathRequest"/>
			<wsdl:output message="tas:CreateCertificationPathResponse"/>
		</wsdl:operation>
		<wsdl:operation name="GetCertificationPath">
			<wsdl:documentation>Returns a certification path.</wsdl:documentation>
			<wsdl:input message="tas:GetCertificationPathRequest"/>
			<wsdl:output message="tas:GetCertificationPathResponse"/>
		</wsdl:operation>
		<wsdl:operation name="GetAllCertificationPaths">
			<wsdl:documentation>Returns all certification paths in the keystore.</wsdl:documentation>
			<wsdl:input message="tas:GetAllCertificationPathsRequest"/>
			<wsdl:output message="tas:GetAllCertificationPathsResponse"/>
		</wsdl:operation>
		<wsdl:operation name="DeleteCertificationPath">
			<wsdl:documentation>Deletes a certification path.</wsdl:documentation>
			<wsdl:input message="tas:DeleteCertificationPathRequest"/>
			<wsdl:output message="tas:DeleteCertificationPathResponse"/>
		</wsdl:operation>
	</wsdl:portType>
	<wsdl:portType name="TLSServer">
		<wsdl:documentation>TLS server functionality.</wsdl:documentation>
		<wsdl:operation name="AddServerCertificateAssignment">
			<wsdl:documentation>Assigns a certificate along with a certification path to the TLS server.</wsdl:documentation>
			<wsdl:input message="tas:AddServerCertificateAssignmentRequest"/>
			<wsdl:output message="tas:AddServerCertificateAssignmentResponse"/>
		</wsdl:operation>
		<wsdl:operation name="RemoveServerCertificateAssignment">
			<wsdl:documentation>Removes a certification path assignment from the TLS server.</wsdl:documentation>
			<wsdl:input message="tas:RemoveServerCertificateAssignmentRequest"/>
			<wsdl:output message="tas:RemoveServerCertificateAssignmentResponse"/>
		</wsdl:operation>
		<wsdl:operation name="ReplaceServerCertificateAssignment">
			<wsdl:documentation>Replaces a certification path assignment to the TLS server by another assignment.</wsdl:documentation>
			<wsdl:input message="tas:ReplaceServerCertificateAssignmentRequest"/>
			<wsdl:output message="tas:ReplaceServerCertificateAssignmentResponse"/>
		</wsdl:operation>
		<wsdl:operation name="GetAssignedServerCertificates">
			<wsdl:documentation>Returns the IDs of all key pairs and certificates (including certification paths) that are assigned to the TLS server on the device.</wsdl:documentation>
			<wsdl:input message="tas:GetAssignedServerCertificatesRequest"/>
			<wsdl:output message="tas:GetAssignedServerCertificatesResponse"/>
		</wsdl:operation>
	</wsdl:portType>
	<wsdl:binding name="AdvancedSecurityServiceBinding" type="tas:AdvancedSecurityService">
		<soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
		<wsdl:operation name="GetServiceCapabilities">
			<soap:operation soapAction="http://www.onvif.org/ver10/advancedsecurity/wsdl/GetServiceCapabilities"/>
			<wsdl:input>
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal"/>
			</wsdl:output>
		</wsdl:operation>
	</wsdl:binding>
	<wsdl:binding name="KeystoreBinding" type="tas:Keystore">
		<soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
		<wsdl:operation name="CreateRSAKeyPair">
			<soap:operation soapAction="http://www.onvif.org/ver10/advancedsecurity/wsdl/CreateRSAKeyPair"/>
			<wsdl:input>
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal"/>
			</wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="GetKeyStatus">
			<soap:operation soapAction="http://www.onvif.org/ver10/advancedsecurity/wsdl/GetKeyStatus"/>
			<wsdl:input>
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal"/>
			</wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="GetPrivateKeyStatus">
			<soap:operation soapAction="http://www.onvif.org/ver10/advancedsecurity/wsdl/GetPrivateKeyStatus"/>
			<wsdl:input>
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal"/>
			</wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="GetAllKeys">
			<soap:operation soapAction="http://www.onvif.org/ver10/advancedsecurity/wsdl/GetAllKeys"/>
			<wsdl:input>
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal"/>
			</wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="DeleteKey">
			<soap:operation soapAction="http://www.onvif.org/ver10/advancedsecurity/wsdl/DeleteKey"/>
			<wsdl:input>
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal"/>
			</wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="CreatePKCS10CSR">
			<soap:operation soapAction="http://www.onvif.org/ver10/advancedsecurity/wsdl/CreatePKCS10CSR"/>
			<wsdl:input>
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal"/>
			</wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="CreateSelfSignedCertificate">
			<soap:operation soapAction="http://www.onvif.org/ver10/advancedsecurity/wsdl/CreateSelfSignedCertificate"/>
			<wsdl:input>
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal"/>
			</wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="UploadCertificate">
			<soap:operation soapAction="http://www.onvif.org/ver10/advancedsecurity/wsdl/UploadCertificate"/>
			<wsdl:input>
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal"/>
			</wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="GetCertificate">
			<soap:operation soapAction="http://www.onvif.org/ver10/advancedsecurity/wsdl/GetCertificate"/>
			<wsdl:input>
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal"/>
			</wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="GetAllCertificates">
			<soap:operation soapAction="http://www.onvif.org/ver10/advancedsecurity/wsdl/GetAllCertificates"/>
			<wsdl:input>
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal"/>
			</wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="DeleteCertificate">
			<soap:operation soapAction="http://www.onvif.org/ver10/advancedsecurity/wsdl/DeleteCertificate"/>
			<wsdl:input>
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal"/>
			</wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="CreateCertificationPath">
			<soap:operation soapAction="http://www.onvif.org/ver10/advancedsecurity/wsdl/CreateCertificationPath"/>
			<wsdl:input>
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal"/>
			</wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="GetCertificationPath">
			<soap:operation soapAction="http://www.onvif.org/ver10/advancedsecurity/wsdl/GetCertificationPath"/>
			<wsdl:input>
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal"/>
			</wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="GetAllCertificationPaths">
			<soap:operation soapAction="http://www.onvif.org/ver10/advancedsecurity/wsdl/GetAllCertificationPaths"/>
			<wsdl:input>
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal"/>
			</wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="DeleteCertificationPath">
			<soap:operation soapAction="http://www.onvif.org/ver10/advancedsecurity/wsdl/DeleteCertificationPath"/>
			<wsdl:input>
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal"/>
			</wsdl:output>
		</wsdl:operation>
	</wsdl:binding>
	<wsdl:binding name="TLSServerBinding" type="tas:TLSServer">
		<soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
		<wsdl:operation name="AddServerCertificateAssignment">
			<soap:operation soapAction="http://www.onvif.org/ver10/advancedsecurity/wsdl/AddServerCertificateAssignment"/>
			<wsdl:input>
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal"/>
			</wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="RemoveServerCertificateAssignment">
			<soap:operation soapAction="http://www.onvif.org/ver10/advancedsecurity/wsdl/RemoveServerCertificateAssignment"/>
			<wsdl:input>
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal"/>
			</wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="ReplaceServerCertificateAssignment">
			<soap:operation soapAction="http://www.onvif.org/ver10/advancedsecurity/wsdl/ReplaceServerCertificateAssignment"/>
			<wsdl:input>
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal"/>
			</wsdl:output>
		</wsdl:operation>
		<wsdl:operation name="GetAssignedServerCertificates">
			<soap:operation soapAction="http://www.onvif.org/ver10/advancedsecurity/wsdl/GetAssignedServerCertificates"/>
			<wsdl:input>
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal"/>
			</wsdl:output>
		</wsdl:operation>
	</wsdl:binding>
</wsdl:definitions>
